---
import BaseLayout from './BaseLayout.astro';

interface Props {
  title: string;
  description: string;
  author: string;
  category: string;
  keywords: string | string[];
  readingTime: number;
  lastModified?: string;
  content: string;
  collectionTheme?: string;
}

const { 
  title, 
  description, 
  author, 
  category, 
  keywords, 
  readingTime, 
  lastModified,
  content,
  collectionTheme = 'weight-loss'
} = Astro.props;

// Convertir les mots-cl√©s en cha√Æne si c'est un tableau
const keywordsString = Array.isArray(keywords) ? keywords.join(', ') : keywords;

// D√©finir les couleurs selon la collection
const themeConfig = {
  'weight-loss': {
    gradient: 'from-green-600 to-green-400',
    badge: 'bg-green-100 text-green-800',
    icon: '‚öñÔ∏è'
  },
  'medical': {
    gradient: 'from-blue-600 to-purple-600',
    badge: 'bg-blue-100 text-blue-800', 
    icon: 'üíä'
  },
  'nutrition': {
    gradient: 'from-orange-600 to-yellow-500',
    badge: 'bg-orange-100 text-orange-800',
    icon: 'ü•ó'
  },
  'research': {
    gradient: 'from-indigo-600 to-purple-600',
    badge: 'bg-indigo-100 text-indigo-800',
    icon: 'üî¨'
  },
  'cost': {
    gradient: 'from-red-600 to-pink-600',
    badge: 'bg-red-100 text-red-800',
    icon: 'üí∞'
  },
  'side-effects': {
    gradient: 'from-yellow-600 to-orange-600',
    badge: 'bg-yellow-100 text-yellow-800',
    icon: '‚ö†Ô∏è'
  },
  'diabetes': {
    gradient: 'from-purple-600 to-blue-600',
    badge: 'bg-purple-100 text-purple-800',
    icon: 'ü©∫'
  }
};

const theme = themeConfig[collectionTheme] || themeConfig['weight-loss'];

// Mapping des cat√©gories vers des noms lisibles et URLs
const categoryMapping = {
  'glp1-perte-de-poids': { name: 'GLP-1 et Perte de Poids', url: '/glp1-perte-de-poids' },
  'medicaments-glp1': { name: 'M√©dicaments GLP-1', url: '/medicaments-glp1' },
  'glp1-cout': { name: 'Prix et Co√ªts GLP-1', url: '/glp1-cout' },
  'effets-secondaires-glp1': { name: 'Effets Secondaires', url: '/effets-secondaires-glp1' },
  'glp1-diabete': { name: 'GLP-1 et Diab√®te', url: '/glp1-diabete' },
  'recherche-glp1': { name: 'Recherche GLP-1', url: '/recherche-glp1' },
  'medecins-glp1-france': { name: 'M√©decins GLP-1 France', url: '/medecins-glp1-france' },
  'alternatives-glp1': { name: 'Alternatives GLP-1', url: '/alternatives-glp1' },
  'regime-glp1': { name: 'R√©gime GLP-1', url: '/regime-glp1' }
};

// Fonction pour g√©n√©rer le fil d'Ariane
function generateBreadcrumb(category, title) {
  const breadcrumb = [
    { name: 'Accueil', url: '/', icon: 'üè†' }
  ];
  
  // Maintenant category contient toujours le nom exact de la collection
  if (categoryMapping[category]) {
    breadcrumb.push({
      name: categoryMapping[category].name,
      url: categoryMapping[category].url,
      icon: theme?.icon || 'üìÑ'
    });
  }
  
  // Article actuel (sans lien)
  breadcrumb.push({
    name: title.length > 50 ? title.substring(0, 50) + '...' : title,
    url: null,
    icon: 'üìñ'
  });
  
  return breadcrumb;
}

// Fonction pour obtenir l'URL de retour correcte
function getBackUrl(category) {
  // Maintenant on a directement le nom de la collection
  if (categoryMapping[category]) {
    return categoryMapping[category].url;
  }
  
  // Fallback simple
  return `/${category}/`;
}

// Fonction pour obtenir le nom affich√© de la collection  
function getDisplayName(category) {
  if (categoryMapping[category]) {
    return categoryMapping[category].name;
  }
  
  // Fallback: formatter la cat√©gorie
  return category.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
}

const breadcrumb = generateBreadcrumb(category, title);
const backUrl = getBackUrl(category);
const displayName = getDisplayName(category);

// Convertir le contenu markdown en HTML (simple)
function markdownToHtml(markdown: string): string {
  return markdown
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/^## (.*$)/gm, '<h2>$1</h2>')
    .replace(/^### (.*$)/gm, '<h3>$1</h3>')
    .replace(/^#### (.*$)/gm, '<h4>$1</h4>')
    .replace(/^\- (.*$)/gm, '<li>$1</li>')
    .replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>')
    .replace(/\[affiliate-box\]/g, '<div class="affiliate-box">Contenu partenaire</div>')
    .replace(/\r?\n\r?\n/g, '</p><p>')
    .replace(/^(?!<[h|u|l])/gm, '<p>')
    .replace(/(?<!>)$/gm, '</p>')
    .replace(/<p><\/p>/g, '')
    .replace(/<p>(<[h|u])/g, '$1')
    .replace(/(<\/[h|u][^>]*>)<\/p>/g, '$1');
}

const htmlContent = markdownToHtml(content);
---

<BaseLayout title={title} description={description}>
  <article class="article-layout">
    <!-- Fil d'Ariane -->
    <nav class="breadcrumb" style="background: #f8fafc; border-bottom: 1px solid #e2e8f0; padding: 12px 0;">
      <div style="max-width: 1200px; margin: 0 auto; padding: 0 16px;">
        <div style="display: flex; align-items: center; gap: 8px; font-size: 14px;">
          <a href="/" style="color: #3b82f6; text-decoration: none;">üè† Accueil</a>
          <span style="color: #9ca3af;">‚Üí</span>
          <a href="/glp1-perte-de-poids" style="color: #3b82f6; text-decoration: none;">‚öñÔ∏è GLP-1 et Perte de Poids</a>
          <span style="color: #9ca3af;">‚Üí</span>
          <span style="color: #6b7280;">üìñ {title.length > 50 ? title.substring(0, 50) + '...' : title}</span>
        </div>
      </div>
    </nav>

    <!-- En-t√™te de l'article -->
    <header class={`article-header bg-gradient-to-r ${theme.gradient} text-white`}>
      <div class="container mx-auto px-4 py-8">
        <div class="max-w-4xl mx-auto">
          <div class="flex items-center gap-4 mb-4">
            <span class="text-3xl">{theme.icon}</span>
            <span class={`px-3 py-1 rounded-full text-sm font-medium ${theme.badge} bg-white bg-opacity-20 text-white`}>
              {category.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
            </span>
          </div>
          
          <h1 class="text-3xl md:text-4xl font-bold mb-4 leading-tight">
            {title}
          </h1>
          
          <p class="text-lg opacity-90 mb-6 leading-relaxed">
            {description}
          </p>
          
          <div class="flex flex-wrap items-center gap-6 text-sm">
            <div class="flex items-center gap-2">
              <span class="opacity-75">‚úçÔ∏è Par</span>
              <span class="font-medium">{author}</span>
            </div>
            <div class="flex items-center gap-2">
              <span class="opacity-75">‚è±Ô∏è</span>
              <span>{readingTime} min de lecture</span>
            </div>
            {lastModified && (
              <div class="flex items-center gap-2">
                <span class="opacity-75">üìÖ</span>
                <span>{new Date(lastModified).toLocaleDateString('fr-FR')}</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>

    <!-- Contenu de l'article -->
    <main class="article-content">
      <div class="container mx-auto px-4 py-12">
        <div class="max-w-4xl mx-auto">
          <div class="prose prose-lg max-w-none" set:html={htmlContent}></div>
          
          <!-- Zone de mots-cl√©s -->
          {keywordsString && (
            <div class="keywords-section mt-12 p-6 bg-gray-50 rounded-xl">
              <h3 class="text-lg font-semibold mb-4">üè∑Ô∏è Mots-cl√©s</h3>
              <div class="flex flex-wrap gap-2">
                {keywordsString.split(',').map(keyword => (
                  <span class="px-3 py-1 bg-white rounded-full text-sm text-gray-700 border">
                    {keyword.trim()}
                  </span>
                ))}
              </div>
            </div>
          )}
          
          <!-- Navigation -->
          <nav class="article-navigation mt-12">
            <a 
              href={backUrl} 
              class={`inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r ${theme.gradient} text-white rounded-lg hover:shadow-lg transition-all duration-300`}
            >
              ‚Üê Retour √† {displayName}
            </a>
          </nav>
        </div>
      </div>
    </main>
  </article>
</BaseLayout>

<style>
  .article-layout {
    min-height: 100vh;
  }

  .article-header {
    position: relative;
    overflow: hidden;
  }

  .article-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
    pointer-events: none;
  }

  .prose {
    color: #374151;
    line-height: 1.8;
  }

  .prose h2 {
    color: #1f2937;
    font-size: 1.875rem;
    font-weight: 700;
    margin: 2rem 0 1rem 0;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #e5e7eb;
  }

  .prose h3 {
    color: #374151;
    font-size: 1.5rem;
    font-weight: 600;
    margin: 1.5rem 0 0.75rem 0;
  }

  .prose h4 {
    color: #4b5563;
    font-size: 1.25rem;
    font-weight: 600;
    margin: 1.25rem 0 0.5rem 0;
  }

  .prose p {
    margin: 1rem 0;
    line-height: 1.8;
  }

  .prose ul {
    margin: 1rem 0;
    padding-left: 0;
    list-style: none;
  }

  .prose li {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
    position: relative;
  }

  .prose ul li::before {
    content: "‚úì";
    color: #16A34A;
    font-weight: bold;
    position: absolute;
    left: 0;
    top: 0;
  }

  .prose li[data-has-symbol]::before {
    content: none;
  }

  .prose strong {
    color: #1f2937;
    font-weight: 600;
  }

  .prose em {
    font-style: italic;
    color: #6b7280;
  }

  .affiliate-box {
    background: linear-gradient(135deg, #fef3c7 0%, #fcd34d 100%);
    border: 2px solid #f59e0b;
    border-radius: 1rem;
    padding: 1.5rem;
    margin: 2rem 0;
    text-align: center;
    font-weight: 600;
    color: #92400e;
  }

  .keywords-section {
    border-left: 4px solid var(--primary-blue);
  }

  .article-navigation {
    border-top: 1px solid #e5e7eb;
    padding-top: 2rem;
  }

  /* Styles pour le fil d'Ariane */
  .breadcrumb {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border-bottom: 1px solid #e2e8f0;
  }

  .breadcrumb ol {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .breadcrumb li {
    display: inline-flex;
    align-items: center;
  }

  .breadcrumb a {
    text-decoration: none;
    transition: all 0.2s ease;
    border-radius: 4px;
    padding: 2px 6px;
  }

  .breadcrumb a:hover {
    background-color: rgba(59, 130, 246, 0.1);
    transform: translateY(-1px);
  }

  .breadcrumb svg {
    flex-shrink: 0;
  }

  @media (max-width: 768px) {
    .breadcrumb {
      padding: 0.5rem 0;
    }

    .breadcrumb ol {
      flex-wrap: wrap;
      gap: 0.25rem;
    }

    .breadcrumb span {
      font-size: 0.875rem;
    }

    .breadcrumb svg {
      width: 0.875rem;
      height: 0.875rem;
    }

    .article-header {
      padding: 2rem 0;
    }
    
    .article-header h1 {
      font-size: 2rem;
    }
    
    .article-content {
      padding: 2rem 0;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Gestion des symboles doubles dans les listes
    const listItems = document.querySelectorAll('.prose li');
    listItems.forEach(li => {
      const text = li.textContent.trim();
      // V√©rifie si l'√©l√©ment contient d√©j√† des symboles
      if (text.includes('‚Üí') || text.includes('‚úì') || text.includes('‚Ä¢') || text.includes('‚ñ∏') || text.includes('-')) {
        li.setAttribute('data-has-symbol', 'true');
      }
    });
  });
</script>
