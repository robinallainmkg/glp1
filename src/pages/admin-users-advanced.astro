---
---

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestion Utilisateurs - Dashboard Admin GLP1</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: #333;
      line-height: 1.6;
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }
    
    /* HEADER */
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      border-radius: 12px;
      margin-bottom: 30px;
      text-align: center;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .header h1 {
      font-size: 2.5em;
      font-weight: 300;
      margin-bottom: 10px;
    }
    
    .header p {
      opacity: 0.9;
      font-size: 1.1em;
    }
    
    /* STATISTIQUES */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .stat-card {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      text-align: center;
      border-left: 4px solid #667eea;
      transition: transform 0.2s ease;
    }
    
    .stat-card:hover {
      transform: translateY(-2px);
    }
    
    .stat-number {
      font-size: 2.5em;
      font-weight: bold;
      color: #667eea;
      margin-bottom: 10px;
    }
    
    .stat-label {
      color: #666;
      font-size: 1.1em;
    }
    
    /* CONTROLES */
    .controls {
      background: white;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 30px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      gap: 15px;
      align-items: center;
      flex-wrap: wrap;
    }
    
    .controls input {
      padding: 12px;
      border: 2px solid #ddd;
      border-radius: 8px;
      font-size: 16px;
      flex: 1;
      min-width: 250px;
    }
    
    .controls input:focus {
      outline: none;
      border-color: #667eea;
    }
    
    .btn {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      white-space: nowrap;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .btn-danger {
      background: #dc3545;
      color: white;
    }
    
    .btn-danger:hover {
      background: #c82333;
    }
    
    .btn-danger:disabled {
      background: #6c757d;
      cursor: not-allowed;
      transform: none;
    }
    
    /* TABLEAU */
    .users-table {
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .table-header {
      background: #667eea;
      color: white;
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .table-header h3 {
      margin: 0;
      font-size: 1.3em;
    }
    
    .table-container {
      overflow-x: auto;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      min-width: 800px;
    }
    
    th, td {
      padding: 15px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }
    
    th {
      background: #f8f9fa;
      font-weight: 600;
      color: #333;
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    tr:hover {
      background: #f8f9fa;
    }
    
    .email-cell {
      font-weight: 600;
      color: #667eea;
    }
    
    .date-cell {
      font-size: 0.9em;
      color: #666;
    }
    
    .actions-cell {
      white-space: nowrap;
    }
    
    .delete-btn {
      background: #dc3545;
      color: white;
      border: none;
      padding: 8px 15px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      transition: all 0.2s ease;
    }
    
    .delete-btn:hover {
      background: #c82333;
      transform: scale(1.05);
    }
    
    .delete-btn:disabled {
      background: #6c757d;
      cursor: not-allowed;
      transform: none;
    }
    
    /* √âTATS D'AFFICHAGE */
    .loading, .error, .empty {
      text-align: center;
      padding: 50px;
      font-size: 1.1em;
    }
    
    .loading {
      color: #667eea;
    }
    
    .error {
      color: #dc3545;
      background: #f8d7da;
      border: 1px solid #f5c6cb;
      border-radius: 8px;
      margin: 20px;
    }
    
    .empty {
      color: #666;
    }
    
    /* NOTIFICATIONS */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 25px;
      border-radius: 8px;
      color: white;
      font-weight: 600;
      z-index: 1000;
      transform: translateX(400px);
      transition: transform 0.3s ease;
      max-width: 400px;
    }
    
    .notification.show {
      transform: translateX(0);
    }
    
    .notification.success {
      background: #28a745;
    }
    
    .notification.error {
      background: #dc3545;
    }
    
    /* RESPONSIVE */
    @media (max-width: 768px) {
      .container {
        padding: 10px;
      }
      
      .header h1 {
        font-size: 2em;
      }
      
      .stats-grid {
        grid-template-columns: 1fr;
      }
      
      .controls {
        flex-direction: column;
        align-items: stretch;
      }
      
      .controls input {
        min-width: auto;
      }
      
      th, td {
        padding: 10px 8px;
      }
    }
    
    /* ANIMATIONS */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
      animation: fadeIn 0.5s ease;
    }
    
    /* UTILITAIRES */
    .hidden {
      display: none !important;
    }
    
    .text-center {
      text-align: center;
    }
    
    .mb-20 {
      margin-bottom: 20px;
    }
  </style>
</head>

<body>
  <div class="container">
    <!-- Header -->
    <div class="header fade-in">
      <h1>üè• Gestion des Utilisateurs</h1>
      <p>Dashboard Admin GLP1 France ‚Ä¢ S√©curis√© ‚Ä¢ Compatible Hostinger</p>
    </div>

    <!-- Statistiques -->
    <div class="stats-grid fade-in">
      <div class="stat-card">
        <div class="stat-number" id="total-users">-</div>
        <div class="stat-label">Utilisateurs Total</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" id="recent-users">-</div>
        <div class="stat-label">Nouveaux (7 jours)</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" id="active-users">-</div>
        <div class="stat-label">Actifs ce mois</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" id="environment">-</div>
        <div class="stat-label">Environnement</div>
      </div>
    </div>

    <!-- Contr√¥les -->
    <div class="controls fade-in">
      <input type="text" id="search-input" placeholder="üîç Rechercher par email, nom..." />
      <button class="btn btn-primary" onclick="loadUsers()">
        üîÑ Actualiser
      </button>
      <button class="btn btn-primary" onclick="exportUsers()">
        üì• Exporter CSV
      </button>
    </div>

    <!-- Tableau des utilisateurs -->
    <div class="users-table fade-in">
      <div class="table-header">
        <h3>üë• Liste des Utilisateurs</h3>
        <span id="filtered-count">0 utilisateur(s)</span>
      </div>
      
      <!-- √âtat de chargement -->
      <div id="loading" class="loading">
        <p>‚è≥ Chargement des utilisateurs...</p>
      </div>
      
      <!-- √âtat d'erreur -->
      <div id="error" class="error hidden">
        <p id="error-message">‚ùå Une erreur est survenue</p>
        <button class="btn btn-primary" onclick="loadUsers()" style="margin-top: 15px;">
          üîÑ R√©essayer
        </button>
      </div>
      
      <!-- √âtat vide -->
      <div id="empty" class="empty hidden">
        <p>üì≠ Aucun utilisateur trouv√©</p>
      </div>
      
      <!-- Contenu du tableau -->
      <div id="users-content" class="hidden">
        <div class="table-container">
          <table>
            <thead>
              <tr>
                <th>üìß Email</th>
                <th>üë§ Nom</th>
                <th>üì± T√©l√©phone</th>
                <th>üìÖ Inscription</th>
                <th>üè∑Ô∏è Tags</th>
                <th>‚ö° Actions</th>
              </tr>
            </thead>
            <tbody id="users-tbody">
              <!-- Donn√©es charg√©es dynamiquement -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Zone de notifications -->
  <div id="notification" class="notification"></div>

  <script>
    // Variables globales
    let allUsers = [];
    let filteredUsers = [];
    
    // √âl√©ments DOM
    const elements = {
      loading: document.getElementById('loading'),
      error: document.getElementById('error'),
      empty: document.getElementById('empty'),
      content: document.getElementById('users-content'),
      tbody: document.getElementById('users-tbody'),
      searchInput: document.getElementById('search-input'),
      errorMessage: document.getElementById('error-message'),
      filteredCount: document.getElementById('filtered-count'),
      totalUsers: document.getElementById('total-users'),
      recentUsers: document.getElementById('recent-users'),
      activeUsers: document.getElementById('active-users'),
      environment: document.getElementById('environment')
    };
    
    // Configuration API - d√©tection automatique de l'environnement
    function getApiConfig() {
      const hostname = window.location.hostname;
      
      if (hostname === 'localhost' || hostname === '127.0.0.1') {
        return {
          env: 'local',
          deleteApi: '/api/delete-user.php',
          usersApi: '/api/user-management.ts'
        };
      } else {
        return {
          env: 'production',
          deleteApi: '/api/delete-user-hostinger.php',
          usersApi: '/api/user-management.ts'
        };
      }
    }
    
    // Afficher une notification
    function showNotification(message, type = 'success') {
      const notification = document.getElementById('notification');
      notification.textContent = message;
      notification.className = `notification ${type}`;
      notification.classList.add('show');
      
      setTimeout(() => {
        notification.classList.remove('show');
      }, 4000);
    }
    
    // Basculer l'√©tat d'affichage
    function setDisplayState(state) {
      Object.values(elements).forEach(el => {
        if (el) el.classList.add('hidden');
      });
      
      if (elements[state]) {
        elements[state].classList.remove('hidden');
      }
    }
    
    // Charger les utilisateurs
    async function loadUsers() {
      try {
        console.log('üöÄ Chargement des utilisateurs...');
        setDisplayState('loading');
        
        const config = getApiConfig();
        elements.environment.textContent = config.env.toUpperCase();
        
        const response = await fetch(`${config.usersApi}?action=list`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache'
          }
        });
        
        if (!response.ok) {
          throw new Error(`Erreur HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (!data.success) {
          throw new Error(data.error || 'Erreur inconnue de l\'API');
        }
        
        allUsers = data.users || [];
        console.log(`‚úÖ ${allUsers.length} utilisateurs charg√©s`);
        
        updateStatistics();
        filterUsers();
        
        showNotification(`‚úÖ ${allUsers.length} utilisateurs charg√©s avec succ√®s`);
        
      } catch (error) {
        console.error('‚ùå Erreur chargement:', error);
        elements.errorMessage.textContent = `‚ùå ${error.message}`;
        setDisplayState('error');
        
        showNotification(`‚ùå Erreur: ${error.message}`, 'error');
      }
    }
    
    // Mettre √† jour les statistiques
    function updateStatistics() {
      const now = new Date();
      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
      
      const recentCount = allUsers.filter(user => {
        const createdAt = new Date(user.createdAt || user.created_at || 0);
        return createdAt >= weekAgo;
      }).length;
      
      const activeCount = allUsers.filter(user => {
        const lastActivity = new Date(user.lastActivity || user.last_activity || user.createdAt || 0);
        return lastActivity >= monthAgo;
      }).length;
      
      elements.totalUsers.textContent = allUsers.length;
      elements.recentUsers.textContent = recentCount;
      elements.activeUsers.textContent = activeCount;
    }
    
    // Filtrer les utilisateurs
    function filterUsers() {
      const searchTerm = elements.searchInput.value.toLowerCase().trim();
      
      if (!searchTerm) {
        filteredUsers = [...allUsers];
      } else {
        filteredUsers = allUsers.filter(user => {
          const email = (user.email || '').toLowerCase();
          const name = (user.name || '').toLowerCase();
          const phone = (user.phone || '').toLowerCase();
          
          return email.includes(searchTerm) || 
                 name.includes(searchTerm) || 
                 phone.includes(searchTerm);
        });
      }
      
      displayUsers();
    }
    
    // Afficher les utilisateurs
    function displayUsers() {
      if (filteredUsers.length === 0) {
        if (allUsers.length === 0) {
          setDisplayState('empty');
        } else {
          elements.tbody.innerHTML = '<tr><td colspan="6" class="text-center">üîç Aucun r√©sultat pour cette recherche</td></tr>';
          setDisplayState('content');
        }
        elements.filteredCount.textContent = '0 utilisateur';
        return;
      }
      
      elements.filteredCount.textContent = `${filteredUsers.length} utilisateur${filteredUsers.length > 1 ? 's' : ''}`;
      
      elements.tbody.innerHTML = filteredUsers.map(user => `
        <tr data-user-email="${user.email}" class="fade-in">
          <td class="email-cell">${user.email}</td>
          <td>${user.name || '-'}</td>
          <td>${user.phone || '-'}</td>
          <td class="date-cell">${formatDate(user.createdAt || user.created_at)}</td>
          <td>${formatTags(user.tags)}</td>
          <td class="actions-cell">
            <button class="delete-btn" onclick="deleteUser('${user.email}')" 
                    title="Supprimer ${user.email}">
              üóëÔ∏è Supprimer
            </button>
          </td>
        </tr>
      `).join('');
      
      setDisplayState('content');
    }
    
    // Formater une date
    function formatDate(dateString) {
      if (!dateString) return '-';
      
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString('fr-FR', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      } catch {
        return dateString;
      }
    }
    
    // Formater les tags
    function formatTags(tags) {
      if (!tags || !Array.isArray(tags) || tags.length === 0) {
        return '-';
      }
      return tags.slice(0, 3).join(', ') + (tags.length > 3 ? '...' : '');
    }
    
    // Supprimer un utilisateur
    async function deleteUser(email) {
      if (!email) {
        showNotification('‚ùå Email manquant pour la suppression', 'error');
        return;
      }
      
      // Trouver les informations de l'utilisateur
      const user = allUsers.find(u => u.email === email);
      const userName = user?.name || 'Utilisateur inconnu';
      
      // Demander confirmation
      const confirmMessage = `‚ö†Ô∏è ATTENTION : Suppression d√©finitive\n\n` +
                            `üë§ Utilisateur: ${userName}\n` +
                            `üìß Email: ${email}\n\n` +
                            `Cette action est IRR√âVERSIBLE.\n` +
                            `Un backup sera automatiquement cr√©√©.\n\n` +
                            `Confirmer la suppression ?`;
      
      if (!confirm(confirmMessage)) {
        return;
      }
      
      console.log('üóëÔ∏è Suppression utilisateur:', email);
      
      // D√©sactiver le bouton de suppression
      const deleteBtn = document.querySelector(`button[onclick="deleteUser('${email}')"]`);
      if (deleteBtn) {
        deleteBtn.disabled = true;
        deleteBtn.innerHTML = '‚è≥ Suppression...';
      }
      
      try {
        const config = getApiConfig();
        
        const response = await fetch(config.deleteApi, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email: email })
        });
        
        const result = await response.json();
        
        if (response.ok && result.success) {
          console.log('‚úÖ Utilisateur supprim√©:', result);
          
          // Supprimer de la liste locale
          allUsers = allUsers.filter(u => u.email !== email);
          filteredUsers = filteredUsers.filter(u => u.email !== email);
          
          // Mettre √† jour l'affichage
          updateStatistics();
          displayUsers();
          
          const message = `‚úÖ ${userName} (${email}) supprim√© avec succ√®s\n` +
                         `üì¶ Backup: ${result.data?.backupFile || 'cr√©√©'}\n` +
                         `üåç Env: ${result.data?.environment || config.env}`;
          
          showNotification(message);
          
        } else {
          throw new Error(result.error || 'Erreur inconnue lors de la suppression');
        }
        
      } catch (error) {
        console.error('‚ùå Erreur suppression:', error);
        
        const message = `‚ùå √âchec suppression de ${email}: ${error.message}`;
        showNotification(message, 'error');
        
        // R√©activer le bouton
        if (deleteBtn) {
          deleteBtn.disabled = false;
          deleteBtn.innerHTML = 'üóëÔ∏è Supprimer';
        }
      }
    }
    
    // Exporter les utilisateurs en CSV
    function exportUsers() {
      if (filteredUsers.length === 0) {
        showNotification('‚ùå Aucun utilisateur √† exporter', 'error');
        return;
      }
      
      const headers = ['Email', 'Nom', 'T√©l√©phone', 'Date Inscription', 'Tags'];
      const csvContent = [
        headers.join(','),
        ...filteredUsers.map(user => [
          user.email || '',
          user.name || '',
          user.phone || '',
          user.createdAt || user.created_at || '',
          (user.tags || []).join(';')
        ].map(field => `"${field}"`).join(','))
      ].join('\n');
      
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      
      if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `utilisateurs-glp1-${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showNotification(`üì• Export r√©ussi: ${filteredUsers.length} utilisateurs`);
      }
    }
    
    // Event listeners
    document.addEventListener('DOMContentLoaded', () => {
      console.log('üöÄ Dashboard utilisateurs initialis√©');
      loadUsers();
      
      // Recherche en temps r√©el
      elements.searchInput.addEventListener('input', filterUsers);
      
      // Recherche au clavier (Entr√©e)
      elements.searchInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          filterUsers();
        }
      });
      
      // Actualisation automatique toutes les 5 minutes
      setInterval(loadUsers, 5 * 60 * 1000);
    });
    
    // Gestion globale des erreurs
    window.addEventListener('error', (e) => {
      console.error('‚ùå Erreur globale:', e.error);
      showNotification('‚ùå Une erreur inattendue s\'est produite', 'error');
    });
    
    // Exposer les fonctions globalement
    window.loadUsers = loadUsers;
    window.deleteUser = deleteUser;
    window.exportUsers = exportUsers;
    
  </script>
</body>
</html>
