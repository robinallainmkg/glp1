---
// Configuration pour Astro hybrid
export const prerender = false;

import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Gestion des Utilisateurs - Admin GLP-1" currentPage="users">
  <div class="admin-content">
    <div class="admin-header">
      <div>
        <h1>üë• Gestion des Utilisateurs</h1>
        <p class="admin-subtitle">Gestion centralis√©e des utilisateurs du site</p>
      </div>
    </div>

      <!-- Loading state -->
      <div id="loading" class="loading-state">
        <div class="loading-spinner"></div>
        <p>Chargement des donn√©es utilisateurs...</p>
      </div>

      <!-- Error state -->
      <div id="error" class="alert alert-error" style="display: none;">
        <h3>‚ùå Erreur</h3>
        <p id="error-message"></p>
      </div>

      <!-- Content -->
      <div id="content" style="display: none;">
        <!-- Statistiques -->
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-number" id="total-users">0</div>
            <div class="stat-label">Utilisateurs Total</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="newsletter-subscribers">0</div>
            <div class="stat-label">Abonn√©s Newsletter</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="recent-users">0</div>
            <div class="stat-label">Actifs (7 jours)</div>
          </div>
        </div>

        <!-- Tableau des utilisateurs -->
        <div class="table-container">
          <div class="table-header">
            <h2>üë• Liste des Utilisateurs (<span id="user-count">0</span>)</h2>
            <div class="header-actions">
              <button id="refresh-btn" class="refresh-btn">üîÑ Actualiser</button>
              <button id="add-user-btn" class="add-btn">‚ûï Ajouter</button>
              <button id="export-btn" class="export-btn">üì• Exporter</button>
            </div>
          </div>
          
          <!-- Filtres -->
          <div class="filters-section">
            <div class="filters-grid">
              <div class="filter-group">
                <label>üîç Rechercher:</label>
                <input type="text" id="search-input" placeholder="Nom ou email..." />
              </div>
              <div class="filter-group">
                <label>üìä Statut:</label>
                <select id="status-filter">
                  <option value="">Tous</option>
                  <option value="active">Actif</option>
                  <option value="inactive">Inactif</option>
                  <option value="banned">Banni</option>
                </select>
              </div>
              <div class="filter-group">
                <label>ÔøΩ R√¥le:</label>
                <select id="role-filter">
                  <option value="">Tous</option>
                  <option value="admin">Admin</option>
                  <option value="user">Utilisateur</option>
                  <option value="moderator">Mod√©rateur</option>
                </select>
              </div>
              <div class="filter-group">
                <label>üí≥ Abonnement:</label>
                <select id="subscription-filter">
                  <option value="">Tous</option>
                  <option value="free">Gratuit</option>
                  <option value="premium">Premium</option>
                  <option value="medical">M√©dical</option>
                  <option value="guide_subscriber">Guide</option>
                </select>
              </div>
            </div>
            <div class="results-info">
              <span id="results-count">0 utilisateur(s)</span>
            </div>
          </div>
          
          <div id="empty-state" class="empty-state" style="display: none;">
            <p>üìù Aucun utilisateur trouv√©</p>
            <small>Utilisez les filtres pour affiner votre recherche</small>
          </div>
          
          <div id="table-wrapper" class="table-wrapper" style="display: none;">
            <table class="users-table">
              <thead>
                <tr>
                  <th><input type="checkbox" id="select-all" /></th>
                  <th>ÔøΩ Utilisateur</th>
                  <th>ÔøΩ Email</th>
                  <th>ÔøΩ Statut</th>
                  <th>ÔøΩ R√¥le</th>
                  <th>ÔøΩ Abonnement</th>
                  <th>ÔøΩ Cr√©ation</th>
                  <th>üõ†Ô∏è Actions</th>
                </tr>
              </thead>
              <tbody id="users-tbody">
              </tbody>
            </table>
          </div>
          
          <!-- Pagination -->
          <div id="pagination" class="pagination-section" style="display: none;">
            <div class="pagination-info">
              <span id="pagination-text">Affichage de 1 √† 20 sur 0 utilisateurs</span>
            </div>
            <div class="pagination-controls">
              <button id="prev-page" class="page-btn">‚Üê Pr√©c√©dent</button>
              <div id="page-numbers"></div>
              <button id="next-page" class="page-btn">Suivant ‚Üí</button>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</BaseLayout>

<style>
  .admin-container {
    min-height: 100vh;
    background-color: #f8fafc;
  }

  .admin-main {
    margin-left: 280px;
    padding: 2rem;
  }

  .admin-header {
    margin-bottom: 2rem;
  }

  .admin-header h1 {
    font-size: 2rem;
    color: #1e293b;
    margin-bottom: 0.5rem;
  }

  .admin-subtitle {
    color: #64748b;
    font-size: 1.1rem;
  }

  .alert {
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
  }

  .alert-error {
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    color: #dc2626;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  .stat-number {
    font-size: 2.5rem;
    font-weight: bold;
    color: #059669;
    margin-bottom: 0.5rem;
  }

  .stat-label {
    color: #64748b;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .table-container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .table-header {
    padding: 1.5rem;
    border-bottom: 1px solid #e2e8f0;
    background: #f8fafc;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .table-header h2 {
    margin: 0;
    color: #1e293b;
    font-size: 1.3rem;
  }

  .header-actions {
    display: flex;
    gap: 0.5rem;
  }

  .refresh-btn, .add-btn, .export-btn {
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s;
    font-weight: 500;
  }

  .refresh-btn {
    background: #059669;
    color: white;
  }

  .refresh-btn:hover {
    background: #047857;
  }

  .add-btn {
    background: #3b82f6;
    color: white;
  }

  .add-btn:hover {
    background: #2563eb;
  }

  .export-btn {
    background: #8b5cf6;
    color: white;
  }

  .export-btn:hover {
    background: #7c3aed;
  }

  .filters-section {
    padding: 1.5rem;
    background: #fafafa;
    border-bottom: 1px solid #e2e8f0;
  }

  .filters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-group label {
    font-size: 0.9rem;
    font-weight: 600;
    color: #374151;
  }

  .filter-group input,
  .filter-group select {
    padding: 0.5rem;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 0.9rem;
  }

  .filter-group input:focus,
  .filter-group select:focus {
    outline: none;
    border-color: #3b82f6;
    ring: 2px solid #dbeafe;
  }

  .results-info {
    text-align: right;
    color: #6b7280;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .pagination-section {
    padding: 1rem 1.5rem;
    background: #f8fafc;
    border-top: 1px solid #e2e8f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .pagination-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .page-btn {
    background: white;
    border: 1px solid #d1d5db;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s;
  }

  .page-btn:hover:not(:disabled) {
    background: #f3f4f6;
  }

  .page-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .page-number {
    background: white;
    border: 1px solid #d1d5db;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s;
    min-width: 40px;
    text-align: center;
  }

  .page-number.active {
    background: #3b82f6;
    color: white;
    border-color: #3b82f6;
  }

  .page-number:hover:not(.active) {
    background: #f3f4f6;
  }

  .loading-state {
    text-align: center;
    padding: 3rem;
    color: #64748b;
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #e2e8f0;
    border-top: 4px solid #059669;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .empty-state {
    padding: 3rem;
    text-align: center;
    color: #64748b;
  }

  .empty-state p {
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
  }

  .table-wrapper {
    overflow-x: auto;
  }

  .users-table {
    width: 100%;
    border-collapse: collapse;
  }

  .users-table th {
    background: #f8fafc;
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: #374151;
    border-bottom: 1px solid #e2e8f0;
    font-size: 0.9rem;
  }

  .users-table td {
    padding: 1rem;
    border-bottom: 1px solid #f1f5f9;
    vertical-align: top;
  }

  .users-table tr:hover {
    background-color: #f8fafc;
  }

  .user-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    font-size: 1rem;
  }

  .user-details {
    flex: 1;
  }

  .user-name {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }

  .user-id {
    font-size: 0.8rem;
    color: #6b7280;
  }

  .status-badge, .role-badge, .subscription-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.8rem;
    font-weight: 500;
    text-align: center;
  }

  .status-active { background: #dcfce7; color: #166534; }
  .status-inactive { background: #fef3c7; color: #92400e; }
  .status-banned { background: #fecaca; color: #991b1b; }

  .role-admin { background: #f3e8ff; color: #7c3aed; }
  .role-user { background: #f1f5f9; color: #475569; }
  .role-moderator { background: #dbeafe; color: #1d4ed8; }

  .subscription-premium { background: #fef3c7; color: #92400e; }
  .subscription-medical { background: #fecaca; color: #991b1b; }
  .subscription-guide_subscriber { background: #dbeafe; color: #1d4ed8; }
  .subscription-free { background: #f1f5f9; color: #475569; }

  .edit-btn, .delete-btn {
    background: none;
    border: none;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 6px;
    transition: all 0.2s;
    margin: 0 0.25rem;
  }

  .edit-btn:hover {
    background: #dbeafe;
  }

  .delete-btn:hover {
    background: #fecaca;
  }

  @keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }

  @keyframes slideOut {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0; }
  }

  @media (max-width: 768px) {
    .admin-main {
      margin-left: 0;
      padding: 1rem;
    }

    .stats-grid {
      grid-template-columns: 1fr;
    }

    .table-wrapper {
      font-size: 0.85rem;
    }

    .users-table th,
    .users-table td {
      padding: 0.75rem 0.5rem;
    }
  }
</style>

<script>
  // ========================================
  // VARIABLES GLOBALES
  // ========================================
  
  let currentPage = 1;
  let pageSize = 20;
  let totalUsers = 0;
  let users = [];
  let filteredUsers = [];
  let selectedUsers = [];
  
  // ========================================
  // INITIALISATION
  // ========================================
  
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Page admin-user-data charg√©e (Supabase)');
    initializeEventListeners();
    loadUsers();
  });
  
  function initializeEventListeners() {
    // Search and filters
    document.getElementById('search-input').addEventListener('input', debounce(applyFilters, 300));
    document.getElementById('status-filter').addEventListener('change', applyFilters);
    document.getElementById('role-filter').addEventListener('change', applyFilters);
    document.getElementById('subscription-filter').addEventListener('change', applyFilters);
    
    // Buttons
    document.getElementById('refresh-btn').addEventListener('click', loadUsers);
    document.getElementById('export-btn').addEventListener('click', exportUsers);
    document.getElementById('add-user-btn').addEventListener('click', () => openUserModal());
    
    // Pagination
    document.getElementById('prev-page').addEventListener('click', () => changePage(-1));
    document.getElementById('next-page').addEventListener('click', () => changePage(1));
    
    // Select all
    document.getElementById('select-all').addEventListener('change', function() {
      const checkboxes = document.querySelectorAll('input[name="user-checkbox"]');
      checkboxes.forEach(cb => cb.checked = this.checked);
      updateSelectedUsers();
    });
  }
  
  // ========================================
  // API CALLS
  // ========================================
  
  async function loadUsers() {
    console.log('üîÑ D√©but chargement des utilisateurs...');
    console.log('üìã Param√®tres:', { currentPage, pageSize });
    
    const loadingEl = document.getElementById('loading');
    const errorEl = document.getElementById('error');
    const contentEl = document.getElementById('content');
    const errorMessageEl = document.getElementById('error-message');
    
    // Affichage du loading
    loadingEl.style.display = 'block';
    errorEl.style.display = 'none';
    contentEl.style.display = 'none';
    
    try {
      const apiUrl = `/api/users?page=${currentPage}&limit=${pageSize}&sortBy=created_at&sortOrder=desc`;
      console.log('üîó URL API:', apiUrl);
      
      const response = await fetch(apiUrl);
      
      console.log('üì° Response status:', response.status);
      console.log('üì° Response ok:', response.ok);
      console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erreur HTTP:', response.status, errorText);
        throw new Error(`Erreur HTTP: ${response.status} - ${errorText}`);
      }
      
      const rawText = await response.text();
      console.log('üìù Raw response text:', rawText.substring(0, 500) + (rawText.length > 500 ? '...' : ''));
      
      let data;
      try {
        data = JSON.parse(rawText);
      } catch (parseError) {
        console.error('‚ùå Erreur de parsing JSON:', parseError);
        throw new Error('R√©ponse invalide du serveur: ' + parseError.message);
      }
      
      console.log('üìä Donn√©es JSON pars√©es:', data);
      console.log('üìä Type des donn√©es:', typeof data);
      console.log('üìä Structure:', Object.keys(data || {}));
      
      // V√©rification de la structure des donn√©es
      if (!data || typeof data !== 'object') {
        throw new Error('Format de donn√©es invalide: ' + typeof data);
      }
      
      console.log('‚úÖ data.success:', data.success);
      console.log('‚úÖ data.data exists:', !!data.data);
      console.log('‚úÖ data.data is array:', Array.isArray(data.data));
      console.log('‚úÖ data.data length:', data.data?.length);
      
      if (data.success) {
        users = Array.isArray(data.data) ? data.data : [];
        totalUsers = data.count || 0;
        filteredUsers = [...users];
        
        console.log(`üë• Users assign√©s: ${users.length} utilisateurs`);
        console.log(`üìä Total users: ${totalUsers}`);
        console.log(`üîç Filtered users: ${filteredUsers.length}`);
        
        updateStats();
        renderUsersTable();
        updatePagination();
        
        console.log(`‚úÖ ${users.length} utilisateurs charg√©s avec succ√®s`);
      } else {
        console.error('‚ùå API success = false');
        console.error('‚ùå API error/message:', data.error || data.message);
        throw new Error(data.error || data.message || 'Erreur lors du chargement');
      }
      
      // Affichage du contenu
      loadingEl.style.display = 'none';
      contentEl.style.display = 'block';
      
    } catch (error) {
      console.error('‚ùå Erreur chargement utilisateurs:', error);
      
      errorMessageEl.textContent = error.message;
      loadingEl.style.display = 'none';
      errorEl.style.display = 'block';
    }
  }
  
  async function deleteUser(userId) {
    // Validation de l'ID utilisateur
    if (!userId || userId === 'undefined' || userId === 'null') {
      console.error('‚ùå ID utilisateur invalide:', userId);
      showNotification('Erreur: ID utilisateur invalide', 'error');
      return;
    }
    
    if (!confirm('√ätes-vous s√ªr de vouloir supprimer cet utilisateur ?')) {
      return;
    }
    
    console.log('üóëÔ∏è Suppression utilisateur:', userId, 'Type:', typeof userId);
    
    try {
      // Construire l'URL avec encodage proper
      const deleteUrl = `/api/users?id=${encodeURIComponent(userId)}`;
      console.log('üîó URL de suppression:', deleteUrl);
      
      const response = await fetch(deleteUrl, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      console.log('üì° Response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erreur HTTP:', response.status, errorText);
        throw new Error(`Erreur HTTP: ${response.status} - ${errorText}`);
      }
      
      const result = await response.json();
      console.log('üìã R√©sultat:', result);
      
      if (result.success) {
        console.log('‚úÖ Utilisateur supprim√©:', userId);
        showNotification('Utilisateur supprim√© avec succ√®s', 'success');
        loadUsers();
      } else {
        throw new Error(result.error || result.message || 'Erreur lors de la suppression');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur suppression:', error);
      showNotification('Erreur lors de la suppression: ' + error.message, 'error');
    }
  }
  
  // ========================================
  // UI FUNCTIONS
  // ========================================
  
  function renderUsersTable() {
    console.log('üé® D√©but renderUsersTable');
    console.log('üìä filteredUsers length:', filteredUsers?.length);
    console.log('üìÑ currentPage:', currentPage);
    console.log('üìÑ pageSize:', pageSize);
    
    const tbody = document.getElementById('users-tbody');
    const emptyState = document.getElementById('empty-state');
    const tableWrapper = document.getElementById('table-wrapper');
    const paginationEl = document.getElementById('pagination');
    
    // V√©rification de s√©curit√©
    if (!Array.isArray(filteredUsers)) {
      console.error('‚ùå filteredUsers n\'est pas un tableau:', filteredUsers);
      filteredUsers = [];
    }
    
    console.log('üîç Apr√®s v√©rification - filteredUsers length:', filteredUsers.length);
    
    if (filteredUsers.length === 0) {
      console.log('üìù Aucun utilisateur filtr√© - affichage empty state');
      emptyState.style.display = 'block';
      tableWrapper.style.display = 'none';
      paginationEl.style.display = 'none';
    } else {
      console.log('üë• Utilisateurs trouv√©s - affichage tableau');
      emptyState.style.display = 'none';
      tableWrapper.style.display = 'block';
      paginationEl.style.display = 'flex';
      
      // CORRECTION: (currentPage - 1) * pageSize pour commencer √† 0 pour la page 1
      const startIndex = (currentPage - 1) * pageSize;
      const endIndex = Math.min(startIndex + pageSize, filteredUsers.length);
      const pageUsers = Array.isArray(filteredUsers) ? filteredUsers.slice(startIndex, endIndex) : [];
      
      console.log('üìÑ Pagination:', { startIndex, endIndex, pageUsersLength: pageUsers.length });
      console.log('üë• Page users:', pageUsers.slice(0, 2)); // Log premiers utilisateurs
      
      if (!tbody) {
        console.error('‚ùå Element tbody non trouv√©');
        return;
      }
      
      tbody.innerHTML = pageUsers.map(user => `
        <tr class="user-row" data-user-id="${user.id}">
          <td>
            <input type="checkbox" name="user-checkbox" value="${user.id}" />
          </td>
          <td>
            <div class="user-info">
              <div class="user-avatar">
                ${(user.name || user.email).charAt(0).toUpperCase()}
              </div>
              <div class="user-details">
                <div class="user-name">${user.name || 'Sans nom'}</div>
                <div class="user-id">ID: ${user.id}</div>
              </div>
            </div>
          </td>
          <td class="email-cell">${user.email}</td>
          <td>
            <span class="status-badge status-${user.status}">
              ${getStatusLabel(user.status)}
            </span>
          </td>
          <td>
            <span class="role-badge role-${user.role}">
              ${getRoleLabel(user.role)}
            </span>
          </td>
          <td>
            <span class="subscription-badge subscription-${user.subscription_type}">
              ${getSubscriptionLabel(user.subscription_type)}
            </span>
          </td>
          <td>${formatDate(user.created_at)}</td>
          <td class="actions-cell">
            <button onclick="editUser('${user.id}')" class="edit-btn" title="Modifier">
              ‚úèÔ∏è
            </button>
            <button onclick="deleteUser('${user.id}')" class="delete-btn" title="Supprimer">
              üóëÔ∏è
            </button>
          </td>
        </tr>
      `).join('');
      
      // Re-attach checkbox event listeners
      document.querySelectorAll('input[name="user-checkbox"]').forEach(cb => {
        cb.addEventListener('change', updateSelectedUsers);
      });
    }
    
    document.getElementById('results-count').textContent = `${filteredUsers.length} utilisateur(s)`;
  }
  
  function updateStats() {
    document.getElementById('total-users').textContent = totalUsers;
    document.getElementById('user-count').textContent = filteredUsers.length;
    
    const activeUsers = users.filter(u => u.status === 'active').length;
    document.getElementById('newsletter-subscribers').textContent = activeUsers;
    
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    const recentUsers = users.filter(u => new Date(u.created_at) > oneWeekAgo).length;
    document.getElementById('recent-users').textContent = recentUsers;
  }
  
  function applyFilters() {
    const searchTerm = document.getElementById('search-input').value.toLowerCase();
    const statusFilter = document.getElementById('status-filter').value;
    const roleFilter = document.getElementById('role-filter').value;
    const subscriptionFilter = document.getElementById('subscription-filter').value;
    
    filteredUsers = users.filter(user => {
      const matchesSearch = !searchTerm || 
        (user.name && user.name.toLowerCase().includes(searchTerm)) ||
        (user.email && user.email.toLowerCase().includes(searchTerm));
      
      const matchesStatus = !statusFilter || user.status === statusFilter;
      const matchesRole = !roleFilter || user.role === roleFilter;
      const matchesSubscription = !subscriptionFilter || user.subscription_type === subscriptionFilter;
      
      return matchesSearch && matchesStatus && matchesRole && matchesSubscription;
    });
    
    currentPage = 1;
    renderUsersTable();
    updatePagination();
  }
  
  function updatePagination() {
    const totalPages = Math.ceil(filteredUsers.length / pageSize);
    const startIndex = currentPage * pageSize + 1;
    const endIndex = Math.min((currentPage + 1) * pageSize, filteredUsers.length);
    
    document.getElementById('pagination-text').textContent = 
      `Affichage de ${startIndex} √† ${endIndex} sur ${filteredUsers.length} utilisateurs`;
    
    // Buttons state
    document.getElementById('prev-page').disabled = currentPage === 1;
    document.getElementById('next-page').disabled = currentPage === totalPages;
    
    // Page numbers
    const pageNumbersEl = document.getElementById('page-numbers');
    pageNumbersEl.innerHTML = '';
    
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    if (endPage - startPage < maxVisiblePages - 1) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      const pageBtn = document.createElement('span');
      pageBtn.className = `page-number ${i === currentPage ? 'active' : ''}`;
      pageBtn.textContent = i;
      pageBtn.onclick = () => {
        currentPage = i;
        renderUsersTable();
        updatePagination();
      };
      pageNumbersEl.appendChild(pageBtn);
    }
  }
  
  function changePage(direction) {
    const totalPages = Math.ceil(filteredUsers.length / pageSize);
    const newPage = currentPage + direction;
    
    if (newPage >= 1 && newPage <= totalPages) {
      currentPage = newPage;
      loadUsers(); // Recharger les donn√©es pour la nouvelle page
    }
  }
  
  function openUserModal(userId = null) {
    // TODO: Impl√©menter modal pour ajouter/modifier utilisateur
    console.log('Modal utilisateur:', userId);
    showNotification('Fonctionnalit√© √† venir', 'info');
  }
  
  function editUser(userId) {
    openUserModal(userId);
  }
  
  function exportUsers() {
    const csvContent = "data:text/csv;charset=utf-8," + 
      "ID,Nom,Email,Statut,R√¥le,Abonnement,Date de cr√©ation\n" +
      filteredUsers.map(user => 
        `${user.id},"${user.name || ''}","${user.email}","${user.status}","${user.role}","${user.subscription_type}","${formatDate(user.created_at)}"`
      ).join("\n");
    
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", `users_export_${new Date().toISOString().split('T')[0]}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showNotification('Export r√©alis√© avec succ√®s', 'success');
  }
  
  function updateSelectedUsers() {
    const checkboxes = document.querySelectorAll('input[name="user-checkbox"]:checked');
    selectedUsers = Array.from(checkboxes).map(cb => parseInt(cb.value));
    console.log('Users s√©lectionn√©s:', selectedUsers);
  }
  
  function showNotification(message, type = 'success') {
    // Simple notification system
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      z-index: 1000;
      animation: slideIn 0.3s ease;
      background: ${type === 'success' ? '#059669' : type === 'error' ? '#dc2626' : '#3b82f6'};
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.style.animation = 'slideOut 0.3s ease forwards';
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }
  
  // ========================================
  // UTILITY FUNCTIONS
  // ========================================
  
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  
  function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('fr-FR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }
  
  function getStatusLabel(status) {
    switch (status) {
      case 'active': return '‚úÖ Actif';
      case 'inactive': return '‚è∏Ô∏è Inactif';
      case 'banned': return 'üö´ Banni';
      default: return status || 'Inconnu';
    }
  }
  
  function getRoleLabel(role) {
    switch (role) {
      case 'admin': return 'üëë Admin';
      case 'moderator': return 'üõ°Ô∏è Mod√©rateur';
      case 'user': return 'üë§ Utilisateur';
      default: return role || 'Utilisateur';
    }
  }
  
  function getSubscriptionLabel(subscription) {
    switch (subscription) {
      case 'premium': return '‚≠ê Premium';
      case 'medical': return 'üè• M√©dical';
      case 'guide_subscriber': return 'üìñ Guide';
      case 'free': return 'üÜì Gratuit';
      default: return subscription || 'Gratuit';
    }
  }
  
  // Exposer les fonctions globalement pour les onclick
  window.deleteUser = deleteUser;
  window.editUser = editUser;
</script>
</AdminLayout>
