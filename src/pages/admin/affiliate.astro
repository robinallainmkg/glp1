---
// Redirection vers la nouvelle page affiliate compl√®te
return Astro.redirect('/admin/affiliate-new');
---

<AdminLayout title="Dashboard Affiliation - GLP-1 France" currentPage="affiliate">
  <div class="admin-content">
  <div class="admin-header">
    <h1>üè∑Ô∏è Dashboard Affiliation</h1>
    <p>G√©rez vos partenariats et produits affili√©s</p>
  </div>

  <!-- Navigation tabs -->
  <div class="admin-tabs">
    <button class="tab-btn active" data-tab="brands">Marques</button>
    <button class="tab-btn" data-tab="products">Produits</button>
    <button class="tab-btn" data-tab="deals">Deals</button>
    <button class="tab-btn" data-tab="stats">Statistiques</button>
  </div>

  <!-- Section Marques -->
  <div id="brands" class="tab-content active">
    <div class="section-header">
      <h2>Marques Partenaires</h2>
      <button class="btn-primary" onclick="showAddBrandModal()">+ Ajouter une marque</button>
    </div>
    
    <div class="brands-grid" id="brands-list">
      <!-- Les marques seront charg√©es ici -->
    </div>
  </div>

  <!-- Section Produits -->
  <div id="products" class="tab-content">
    <div class="section-header">
      <h2>Produits Affili√©s</h2>
      <button class="btn-primary" onclick="showAddProductModal()">+ Ajouter un produit</button>
    </div>
    
    <div class="products-table">
      <table id="products-table">
        <thead>
          <tr>
            <th>Produit</th>
            <th>Marque</th>
            <th>Cat√©gorie</th>
            <th>Prix</th>
            <th>GLP-1 Relevant</th>
            <th>Statut</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="products-list">
          <!-- Les produits seront charg√©s ici -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Section Deals -->
  <div id="deals" class="tab-content">
    <div class="section-header">
      <h2>Offres Promotionnelles</h2>
      <button class="btn-primary" onclick="showAddDealModal()">+ Cr√©er un deal</button>
    </div>
    
    <div class="deals-grid" id="deals-list">
      <!-- Les deals seront charg√©s ici -->
    </div>
  </div>

  <!-- Section Statistiques -->
  <div id="stats" class="tab-content">
    <div class="section-header">
      <h2>Performances Affiliation</h2>
      <div class="date-filter">
        <input type="date" id="start-date">
        <input type="date" id="end-date">
        <button class="btn-secondary" onclick="loadStats()">Actualiser</button>
      </div>
    </div>
    
    <div class="stats-overview">
      <div class="stat-card">
        <h3>Clics Total</h3>
        <div class="stat-value" id="total-clicks">-</div>
      </div>
      <div class="stat-card">
        <h3>Conversions</h3>
        <div class="stat-value" id="total-conversions">-</div>
      </div>
      <div class="stat-card">
        <h3>Revenus</h3>
        <div class="stat-value" id="total-revenue">-</div>
      </div>
      <div class="stat-card">
        <h3>Taux de Conversion</h3>
        <div class="stat-value" id="conversion-rate">-</div>
      </div>
    </div>
    
    <div class="stats-table">
      <table id="stats-table">
        <thead>
          <tr>
            <th>Date</th>
            <th>Produit</th>
            <th>Clics</th>
            <th>Conversions</th>
            <th>Revenus</th>
            <th>Taux</th>
          </tr>
        </thead>
        <tbody id="stats-list">
          <!-- Les stats seront charg√©es ici -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Modal Ajouter Marque -->
<div id="add-brand-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>Ajouter une Marque</h3>
      <span class="close" onclick="closeModal('add-brand-modal')">&times;</span>
    </div>
    <form id="add-brand-form">
      <div class="form-group">
        <label>Nom de la marque *</label>
        <input type="text" name="name" required>
      </div>
      <div class="form-group">
        <label>Slug (URL)</label>
        <input type="text" name="slug">
      </div>
      <div class="form-group">
        <label>URL du site</label>
        <input type="url" name="website_url">
      </div>
      <div class="form-group">
        <label>URL du logo</label>
        <input type="url" name="logo_url">
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>% Remise client *</label>
          <input type="number" name="discount_percentage" min="0" max="100" required>
        </div>
        <div class="form-group">
          <label>% Commission *</label>
          <input type="number" name="commission_percentage" min="0" max="100" required>
        </div>
      </div>
      <div class="form-group">
        <label>Code affili√©</label>
        <input type="text" name="affiliate_code">
      </div>
      <div class="form-group">
        <label>Description</label>
        <textarea name="description" rows="3"></textarea>
      </div>
      <div class="form-group">
        <label>Email contact</label>
        <input type="email" name="contact_email">
      </div>
      <div class="form-group">
        <label>
          <input type="checkbox" name="is_active" checked>
          Marque active
        </label>
      </div>
      <div class="modal-actions">
        <button type="button" class="btn-secondary" onclick="closeModal('add-brand-modal')">Annuler</button>
        <button type="submit" class="btn-primary">Ajouter</button>
      </div>
    </form>
  </div>
</div>

<!-- Modal Ajouter Produit -->
<div id="add-product-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>Ajouter un Produit</h3>
      <span class="close" onclick="closeModal('add-product-modal')">&times;</span>
    </div>
    <form id="add-product-form">
      <div class="form-group">
        <label>Marque *</label>
        <select name="brand_id" required id="brand-select">
          <option value="">S√©lectionner une marque</option>
        </select>
      </div>
      <div class="form-group">
        <label>Nom du produit *</label>
        <input type="text" name="name" required>
      </div>
      <div class="form-group">
        <label>Slug (URL)</label>
        <input type="text" name="slug">
      </div>
      <div class="form-group">
        <label>Description</label>
        <textarea name="description" rows="3"></textarea>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>Prix</label>
          <input type="number" name="price" step="0.01">
        </div>
        <div class="form-group">
          <label>Devise</label>
          <select name="currency">
            <option value="EUR">EUR</option>
            <option value="USD">USD</option>
          </select>
        </div>
      </div>
      <div class="form-group">
        <label>URL image</label>
        <input type="url" name="image_url">
      </div>
      <div class="form-group">
        <label>URL affili√©e</label>
        <input type="url" name="affiliate_url">
      </div>
      <div class="form-group">
        <label>B√©n√©fice GLP-1</label>
        <input type="text" name="glp1_benefit" placeholder="Ex: R√©duit les naus√©es">
      </div>
      <div class="form-group">
        <label>Recommand√© pour (tags s√©par√©s par des virgules)</label>
        <input type="text" name="recommended_for" placeholder="naus√©es, ballonnements, fatigue">
      </div>
      <div class="form-group">
        <label>Statut stock</label>
        <select name="stock_status">
          <option value="in_stock">En stock</option>
          <option value="low_stock">Stock faible</option>
          <option value="out_of_stock">Rupture</option>
        </select>
      </div>
      <div class="form-group">
        <label>
          <input type="checkbox" name="side_effects_help">
          Aide avec les effets secondaires
        </label>
      </div>
      <div class="form-group">
        <label>
          <input type="checkbox" name="is_featured">
          Produit mis en avant
        </label>
      </div>
      <div class="form-group">
        <label>
          <input type="checkbox" name="is_active" checked>
          Produit actif
        </label>
      </div>
      <div class="modal-actions">
        <button type="button" class="btn-secondary" onclick="closeModal('add-product-modal')">Annuler</button>
        <button type="submit" class="btn-primary">Ajouter</button>
      </div>
    </form>
  </div>
</div>

<!-- Modal Ajouter Deal -->
<div id="add-deal-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>Cr√©er un Deal</h3>
      <span class="close" onclick="closeModal('add-deal-modal')">&times;</span>
    </div>
    <form id="add-deal-form">
      <div class="form-group">
        <label>Marque *</label>
        <select name="brand_id" required id="deal-brand-select">
          <option value="">S√©lectionner une marque</option>
        </select>
      </div>
      <div class="form-group">
        <label>Produit (optionnel)</label>
        <select name="product_id" id="deal-product-select">
          <option value="">Tous les produits de la marque</option>
        </select>
      </div>
      <div class="form-group">
        <label>Titre du deal *</label>
        <input type="text" name="title" required>
      </div>
      <div class="form-group">
        <label>Description</label>
        <textarea name="description" rows="2"></textarea>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>Type de remise</label>
          <select name="discount_type">
            <option value="percentage">Pourcentage</option>
            <option value="fixed">Montant fixe</option>
            <option value="code">Code promo</option>
          </select>
        </div>
        <div class="form-group">
          <label>Valeur</label>
          <input type="number" name="discount_value" step="0.01" required>
        </div>
      </div>
      <div class="form-group">
        <label>Code promo</label>
        <input type="text" name="promo_code">
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>Date de d√©but</label>
          <input type="date" name="start_date">
        </div>
        <div class="form-group">
          <label>Date de fin</label>
          <input type="date" name="end_date">
        </div>
      </div>
      <div class="form-group">
        <label>Utilisations max</label>
        <input type="number" name="max_uses">
      </div>
      <div class="form-group">
        <label>
          <input type="checkbox" name="is_active" checked>
          Deal actif
        </label>
      </div>
      <div class="modal-actions">
        <button type="button" class="btn-secondary" onclick="closeModal('add-deal-modal')">Annuler</button>
        <button type="submit" class="btn-primary">Cr√©er</button>
      </div>
    </form>
  </div>
  </div>

  <style>
    .admin-content {
      padding: 20px;
    }.admin-header {
  margin-bottom: 30px;
  padding: 20px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 12px;
}

.admin-header h1 {
  margin: 0 0 8px 0;
  font-size: 2rem;
  font-weight: 700;
}

.admin-header p {
  margin: 0;
  opacity: 0.9;
}

.admin-tabs {
  display: flex;
  margin-bottom: 30px;
  border-bottom: 2px solid #e5e7eb;
}

.tab-btn {
  padding: 12px 24px;
  background: none;
  border: none;
  font-size: 1rem;
  font-weight: 500;
  color: #6b7280;
  cursor: pointer;
  transition: all 0.2s;
  border-bottom: 2px solid transparent;
}

.tab-btn:hover {
  color: #374151;
  background: #f9fafb;
}

.tab-btn.active {
  color: #667eea;
  border-bottom-color: #667eea;
}

.tab-content {
  display: none;
}

.tab-content.active {
  display: block;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
}

.section-header h2 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 600;
  color: #1f2937;
}

.btn-primary {
  background: #667eea;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: background 0.2s;
}

.btn-primary:hover {
  background: #5a67d8;
}

.btn-secondary {
  background: #f3f4f6;
  color: #374151;
  border: 1px solid #d1d5db;
  padding: 10px 20px;
  border-radius: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.btn-secondary:hover {
  background: #e5e7eb;
}

.brands-grid, .deals-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
}

.brand-card, .deal-card {
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  padding: 20px;
  transition: all 0.2s;
}

.brand-card:hover, .deal-card:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

.brand-header {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 16px;
}

.brand-logo {
  width: 48px;
  height: 48px;
  border-radius: 8px;
  object-fit: cover;
  background: #f3f4f6;
}

.brand-name {
  font-size: 1.25rem;
  font-weight: 600;
  color: #1f2937;
  margin: 0;
}

.brand-stats {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
  margin: 16px 0;
}

.stat-item {
  text-align: center;
  padding: 8px;
  background: #f9fafb;
  border-radius: 6px;
}

.stat-label {
  font-size: 0.75rem;
  color: #6b7280;
  margin-bottom: 4px;
}

.stat-value {
  font-size: 1.25rem;
  font-weight: 600;
  color: #1f2937;
}

.brand-actions {
  display: flex;
  gap: 8px;
  margin-top: 16px;
}

.btn-small {
  padding: 6px 12px;
  font-size: 0.875rem;
  border-radius: 6px;
  border: none;
  cursor: pointer;
  transition: all 0.2s;
}

.btn-edit {
  background: #f59e0b;
  color: white;
}

.btn-edit:hover {
  background: #d97706;
}

.btn-delete {
  background: #ef4444;
  color: white;
}

.btn-delete:hover {
  background: #dc2626;
}

.products-table {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid #e5e7eb;
}

.products-table table {
  width: 100%;
  border-collapse: collapse;
}

.products-table th {
  background: #f9fafb;
  padding: 12px 16px;
  text-align: left;
  font-weight: 600;
  color: #374151;
  border-bottom: 1px solid #e5e7eb;
}

.products-table td {
  padding: 12px 16px;
  border-bottom: 1px solid #f3f4f6;
}

.status-badge {
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.75rem;
  font-weight: 500;
}

.status-active {
  background: #d1fae5;
  color: #065f46;
}

.status-inactive {
  background: #fee2e2;
  color: #991b1b;
}

.stats-overview {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  background: white;
  padding: 24px;
  border-radius: 12px;
  border: 1px solid #e5e7eb;
  text-align: center;
}

.stat-card h3 {
  margin: 0 0 8px 0;
  font-size: 0.875rem;
  color: #6b7280;
  font-weight: 500;
}

.stat-card .stat-value {
  font-size: 2rem;
  font-weight: 700;
  color: #1f2937;
}

.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
  background-color: white;
  margin: 5% auto;
  padding: 0;
  border-radius: 12px;
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 24px;
  border-bottom: 1px solid #e5e7eb;
}

.modal-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
}

.close {
  font-size: 24px;
  font-weight: bold;
  cursor: pointer;
  color: #6b7280;
}

.close:hover {
  color: #374151;
}

.modal form {
  padding: 24px;
}

.form-group {
  margin-bottom: 20px;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 6px;
  font-weight: 500;
  color: #374151;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 10px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 0.875rem;
  transition: border-color 0.2s;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-group input[type="checkbox"] {
  width: auto;
  margin-right: 8px;
}

.modal-actions {
  display: flex;
  gap: 12px;
  justify-content: flex-end;
  margin-top: 24px;
}

.date-filter {
  display: flex;
  gap: 12px;
  align-items: center;
}

.date-filter input {
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
}

.loading {
  text-align: center;
  padding: 40px;
  color: #6b7280;
}

.empty-state {
  text-align: center;
  padding: 60px 20px;
  color: #6b7280;
}

.empty-state h3 {
  margin: 0 0 8px 0;
  font-size: 1.25rem;
  color: #374151;
}

.empty-state p {
  margin: 0;
}
</style>

<script>
// Import des services d'affiliation
import { BrandService, ProductService, DealService, StatsService } from '../../lib/services/affiliateService.ts';

// Variables globales
let brands = [];
let products = [];
let deals = [];

// Initialisation de la page
document.addEventListener('DOMContentLoaded', async () => {
  await loadAllData();
  setupEventListeners();
  setupTabNavigation();
});

// Configuration de la navigation par onglets
function setupTabNavigation() {
  const tabBtns = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.tab-content');

  tabBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const targetTab = btn.dataset.tab;
      
      // D√©sactiver tous les onglets
      tabBtns.forEach(b => b.classList.remove('active'));
      tabContents.forEach(content => content.classList.remove('active'));
      
      // Activer l'onglet cliqu√©
      btn.classList.add('active');
      document.getElementById(targetTab).classList.add('active');
    });
  });
}

// Configuration des √©couteurs d'√©v√©nements
function setupEventListeners() {
  // Formulaire ajout marque
  document.getElementById('add-brand-form').addEventListener('submit', handleAddBrand);
  
  // Formulaire ajout produit
  document.getElementById('add-product-form').addEventListener('submit', handleAddProduct);
  
  // Formulaire ajout deal
  document.getElementById('add-deal-form').addEventListener('submit', handleAddDeal);
  
  // Auto-g√©n√©ration des slugs
  document.querySelector('[name="name"]').addEventListener('input', (e) => {
    const slugField = document.querySelector('[name="slug"]');
    if (slugField && !slugField.value) {
      slugField.value = generateSlug(e.target.value);
    }
  });
}

// Chargement de toutes les donn√©es
async function loadAllData() {
  try {
    await Promise.all([
      loadBrands(),
      loadProducts(),
      loadDeals(),
      loadStats()
    ]);
  } catch (error) {
    console.error('Erreur lors du chargement des donn√©es:', error);
    showError('Erreur lors du chargement des donn√©es');
  }
}

// Chargement des marques
async function loadBrands() {
  try {
    brands = await BrandService.getAll();
    renderBrands();
    populateBrandSelects();
  } catch (error) {
    console.error('Erreur chargement marques:', error);
    document.getElementById('brands-list').innerHTML = '<div class="empty-state"><h3>Erreur</h3><p>Impossible de charger les marques</p></div>';
  }
}

// Affichage des marques
function renderBrands() {
  const container = document.getElementById('brands-list');
  
  if (brands.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <h3>Aucune marque</h3>
        <p>Commencez par ajouter votre premi√®re marque partenaire</p>
      </div>
    `;
    return;
  }

  container.innerHTML = brands.map(brand => `
    <div class="brand-card">
      <div class="brand-header">
        ${brand.logo_url ? 
          `<img src="${brand.logo_url}" alt="${brand.name}" class="brand-logo">` : 
          `<div class="brand-logo" style="display: flex; align-items: center; justify-content: center; font-weight: 600; color: #6b7280;">${brand.name.charAt(0)}</div>`
        }
        <h3 class="brand-name">${brand.name}</h3>
      </div>
      
      <div class="brand-stats">
        <div class="stat-item">
          <div class="stat-label">Remise</div>
          <div class="stat-value">${brand.discount_percentage}%</div>
        </div>
        <div class="stat-item">
          <div class="stat-label">Commission</div>
          <div class="stat-value">${brand.commission_percentage}%</div>
        </div>
      </div>
      
      ${brand.description ? `<p style="color: #6b7280; margin: 12px 0;">${brand.description}</p>` : ''}
      
      <div class="brand-actions">
        <button class="btn-small btn-edit" onclick="editBrand('${brand.id}')">Modifier</button>
        <button class="btn-small btn-delete" onclick="deleteBrand('${brand.id}')">Supprimer</button>
        <span class="status-badge ${brand.is_active ? 'status-active' : 'status-inactive'}">
          ${brand.is_active ? 'Actif' : 'Inactif'}
        </span>
      </div>
    </div>
  `).join('');
}

// Chargement des produits
async function loadProducts() {
  try {
    products = await ProductService.getAll();
    renderProducts();
  } catch (error) {
    console.error('Erreur chargement produits:', error);
    document.getElementById('products-list').innerHTML = '<tr><td colspan="7">Erreur lors du chargement</td></tr>';
  }
}

// Affichage des produits
function renderProducts() {
  const tbody = document.getElementById('products-list');
  
  if (products.length === 0) {
    tbody.innerHTML = '<tr><td colspan="7" class="empty-state">Aucun produit ajout√©</td></tr>';
    return;
  }

  tbody.innerHTML = products.map(product => `
    <tr>
      <td>
        <div style="display: flex; align-items: center; gap: 12px;">
          ${product.image_url ? 
            `<img src="${product.image_url}" alt="${product.name}" style="width: 40px; height: 40px; border-radius: 6px; object-fit: cover;">` : 
            '<div style="width: 40px; height: 40px; background: #f3f4f6; border-radius: 6px;"></div>'
          }
          <div>
            <div style="font-weight: 500;">${product.name}</div>
            ${product.glp1_benefit ? `<div style="font-size: 0.75rem; color: #6b7280;">${product.glp1_benefit}</div>` : ''}
          </div>
        </div>
      </td>
      <td>${product.brand?.name || '-'}</td>
      <td>${product.category?.name || '-'}</td>
      <td>${product.price ? `${product.price}‚Ç¨` : '-'}</td>
      <td>
        <span class="status-badge ${product.side_effects_help ? 'status-active' : 'status-inactive'}">
          ${product.side_effects_help ? 'Oui' : 'Non'}
        </span>
      </td>
      <td>
        <span class="status-badge ${product.is_active ? 'status-active' : 'status-inactive'}">
          ${product.is_active ? 'Actif' : 'Inactif'}
        </span>
      </td>
      <td>
        <button class="btn-small btn-edit" onclick="editProduct('${product.id}')">Modifier</button>
        <button class="btn-small btn-delete" onclick="deleteProduct('${product.id}')">Supprimer</button>
      </td>
    </tr>
  `).join('');
}

// Chargement des deals
async function loadDeals() {
  try {
    deals = await DealService.getAll();
    renderDeals();
  } catch (error) {
    console.error('Erreur chargement deals:', error);
    document.getElementById('deals-list').innerHTML = '<div class="empty-state"><h3>Erreur</h3><p>Impossible de charger les deals</p></div>';
  }
}

// Affichage des deals
function renderDeals() {
  const container = document.getElementById('deals-list');
  
  if (deals.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <h3>Aucun deal</h3>
        <p>Cr√©ez votre premi√®re offre promotionnelle</p>
      </div>
    `;
    return;
  }

  container.innerHTML = deals.map(deal => `
    <div class="deal-card">
      <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;">
        <h3 style="margin: 0; font-size: 1.1rem;">${deal.title}</h3>
        <span class="status-badge ${deal.is_active ? 'status-active' : 'status-inactive'}">
          ${deal.is_active ? 'Actif' : 'Inactif'}
        </span>
      </div>
      
      <div style="margin-bottom: 16px;">
        <div style="color: #6b7280; font-size: 0.875rem;">Marque: ${deal.brand?.name}</div>
        ${deal.product ? `<div style="color: #6b7280; font-size: 0.875rem;">Produit: ${deal.product.name}</div>` : ''}
      </div>
      
      <div style="background: #f9fafb; padding: 12px; border-radius: 6px; margin-bottom: 16px;">
        <div style="font-weight: 600; color: #1f2937;">
          ${deal.discount_type === 'percentage' ? `${deal.discount_value}% de r√©duction` :
            deal.discount_type === 'fixed' ? `${deal.discount_value}‚Ç¨ de r√©duction` :
            `Code: ${deal.promo_code}`}
        </div>
        ${deal.promo_code && deal.discount_type !== 'code' ? `<div style="color: #6b7280; font-size: 0.875rem;">Code: ${deal.promo_code}</div>` : ''}
      </div>
      
      ${deal.description ? `<p style="color: #6b7280; margin: 12px 0; font-size: 0.875rem;">${deal.description}</p>` : ''}
      
      <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 16px;">
        <div style="font-size: 0.75rem; color: #6b7280;">
          ${deal.current_uses}${deal.max_uses ? `/${deal.max_uses}` : ''} utilisations
        </div>
        <div>
          <button class="btn-small btn-edit" onclick="editDeal('${deal.id}')">Modifier</button>
          <button class="btn-small btn-delete" onclick="deleteDeal('${deal.id}')">Supprimer</button>
        </div>
      </div>
    </div>
  `).join('');
}

// Chargement des statistiques
async function loadStats() {
  try {
    const endDate = new Date().toISOString().split('T')[0];
    const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    
    document.getElementById('start-date').value = startDate;
    document.getElementById('end-date').value = endDate;
    
    const stats = await StatsService.getStatsByDateRange(startDate, endDate);
    renderStats(stats);
  } catch (error) {
    console.error('Erreur chargement stats:', error);
    document.getElementById('stats-list').innerHTML = '<tr><td colspan="6">Erreur lors du chargement</td></tr>';
  }
}

// Affichage des statistiques
function renderStats(stats) {
  // Calcul des totaux
  const totalClicks = stats.reduce((sum, stat) => sum + stat.click_count, 0);
  const totalConversions = stats.reduce((sum, stat) => sum + stat.conversion_count, 0);
  const totalRevenue = stats.reduce((sum, stat) => sum + stat.revenue, 0);
  const conversionRate = totalClicks > 0 ? ((totalConversions / totalClicks) * 100).toFixed(2) : '0';

  // Mise √† jour des cartes de r√©sum√©
  document.getElementById('total-clicks').textContent = totalClicks.toLocaleString();
  document.getElementById('total-conversions').textContent = totalConversions.toLocaleString();
  document.getElementById('total-revenue').textContent = `${totalRevenue.toFixed(2)}‚Ç¨`;
  document.getElementById('conversion-rate').textContent = `${conversionRate}%`;

  // Affichage du tableau d√©taill√©
  const tbody = document.getElementById('stats-list');
  
  if (stats.length === 0) {
    tbody.innerHTML = '<tr><td colspan="6" class="empty-state">Aucune donn√©e pour cette p√©riode</td></tr>';
    return;
  }

  tbody.innerHTML = stats.map(stat => {
    const product = products.find(p => p.id === stat.product_id);
    const convRate = stat.click_count > 0 ? ((stat.conversion_count / stat.click_count) * 100).toFixed(1) : '0';
    
    return `
      <tr>
        <td>${new Date(stat.date).toLocaleDateString('fr-FR')}</td>
        <td>${product?.name || 'Tous les produits'}</td>
        <td>${stat.click_count}</td>
        <td>${stat.conversion_count}</td>
        <td>${stat.revenue.toFixed(2)}‚Ç¨</td>
        <td>${convRate}%</td>
      </tr>
    `;
  }).join('');
}

// Gestion des modales
function showAddBrandModal() {
  document.getElementById('add-brand-modal').style.display = 'block';
}

function showAddProductModal() {
  populateBrandSelects();
  document.getElementById('add-product-modal').style.display = 'block';
}

function showAddDealModal() {
  populateBrandSelects();
  document.getElementById('add-deal-modal').style.display = 'block';
}

function closeModal(modalId) {
  document.getElementById(modalId).style.display = 'none';
  // Reset form
  const form = document.querySelector(`#${modalId} form`);
  if (form) form.reset();
}

// Population des s√©lecteurs de marques
function populateBrandSelects() {
  const selects = [
    document.getElementById('brand-select'),
    document.getElementById('deal-brand-select')
  ];

  selects.forEach(select => {
    if (select) {
      select.innerHTML = '<option value="">S√©lectionner une marque</option>' +
        brands.map(brand => `<option value="${brand.id}">${brand.name}</option>`).join('');
    }
  });
}

// Gestionnaires de formulaires
async function handleAddBrand(e) {
  e.preventDefault();
  
  try {
    const formData = new FormData(e.target);
    const brandData = {
      name: formData.get('name'),
      slug: formData.get('slug') || generateSlug(formData.get('name')),
      website_url: formData.get('website_url') || null,
      logo_url: formData.get('logo_url') || null,
      discount_percentage: parseInt(formData.get('discount_percentage')),
      commission_percentage: parseInt(formData.get('commission_percentage')),
      affiliate_code: formData.get('affiliate_code') || null,
      description: formData.get('description') || null,
      contact_email: formData.get('contact_email') || null,
      is_active: formData.has('is_active')
    };

    await BrandService.create(brandData);
    await loadBrands();
    closeModal('add-brand-modal');
    showSuccess('Marque ajout√©e avec succ√®s');
  } catch (error) {
    console.error('Erreur ajout marque:', error);
    showError('Erreur lors de l\'ajout de la marque');
  }
}

async function handleAddProduct(e) {
  e.preventDefault();
  
  try {
    const formData = new FormData(e.target);
    const recommendedFor = formData.get('recommended_for');
    
    const productData = {
      brand_id: formData.get('brand_id'),
      name: formData.get('name'),
      slug: formData.get('slug') || generateSlug(formData.get('name')),
      description: formData.get('description') || null,
      price: formData.get('price') ? parseFloat(formData.get('price')) : null,
      currency: formData.get('currency') || 'EUR',
      image_url: formData.get('image_url') || null,
      affiliate_url: formData.get('affiliate_url') || null,
      glp1_benefit: formData.get('glp1_benefit') || null,
      recommended_for: recommendedFor ? recommendedFor.split(',').map(s => s.trim()) : [],
      stock_status: formData.get('stock_status') || 'in_stock',
      side_effects_help: formData.has('side_effects_help'),
      is_featured: formData.has('is_featured'),
      is_active: formData.has('is_active')
    };

    await ProductService.create(productData);
    await loadProducts();
    closeModal('add-product-modal');
    showSuccess('Produit ajout√© avec succ√®s');
  } catch (error) {
    console.error('Erreur ajout produit:', error);
    showError('Erreur lors de l\'ajout du produit');
  }
}

async function handleAddDeal(e) {
  e.preventDefault();
  
  try {
    const formData = new FormData(e.target);
    
    const dealData = {
      brand_id: formData.get('brand_id'),
      product_id: formData.get('product_id') || null,
      title: formData.get('title'),
      description: formData.get('description') || null,
      discount_type: formData.get('discount_type'),
      discount_value: parseFloat(formData.get('discount_value')),
      promo_code: formData.get('promo_code') || null,
      start_date: formData.get('start_date') || null,
      end_date: formData.get('end_date') || null,
      max_uses: formData.get('max_uses') ? parseInt(formData.get('max_uses')) : null,
      current_uses: 0,
      is_active: formData.has('is_active')
    };

    await DealService.create(dealData);
    await loadDeals();
    closeModal('add-deal-modal');
    showSuccess('Deal cr√©√© avec succ√®s');
  } catch (error) {
    console.error('Erreur cr√©ation deal:', error);
    showError('Erreur lors de la cr√©ation du deal');
  }
}

// Fonctions utilitaires
function generateSlug(text) {
  return text
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');
}

function showSuccess(message) {
  // Implementation simple - peut √™tre am√©lior√©e avec une librairie de notifications
  alert(message);
}

function showError(message) {
  // Implementation simple - peut √™tre am√©lior√©e avec une librairie de notifications
  alert(message);
}

// Fonctions de suppression (√† impl√©menter)
async function deleteBrand(id) {
  if (confirm('√ätes-vous s√ªr de vouloir supprimer cette marque ?')) {
    try {
      await BrandService.delete(id);
      await loadBrands();
      showSuccess('Marque supprim√©e');
    } catch (error) {
      showError('Erreur lors de la suppression');
    }
  }
}

async function deleteProduct(id) {
  if (confirm('√ätes-vous s√ªr de vouloir supprimer ce produit ?')) {
    try {
      await ProductService.delete(id);
      await loadProducts();
      showSuccess('Produit supprim√©');
    } catch (error) {
      showError('Erreur lors de la suppression');
    }
  }
}

async function deleteDeal(id) {
  if (confirm('√ätes-vous s√ªr de vouloir supprimer ce deal ?')) {
    try {
      await DealService.delete(id);
      await loadDeals();
      showSuccess('Deal supprim√©');
    } catch (error) {
      showError('Erreur lors de la suppression');
    }
  }
}

// Fonctions d'√©dition (√† impl√©menter)
function editBrand(id) {
  console.log('√âditer marque:', id);
  // TODO: Impl√©menter l'√©dition
}

function editProduct(id) {
  console.log('√âditer produit:', id);
  // TODO: Impl√©menter l'√©dition
}

function editDeal(id) {
  console.log('√âditer deal:', id);
  // TODO: Impl√©menter l'√©dition
}

// Fermeture des modales en cliquant √† l'ext√©rieur
window.addEventListener('click', (e) => {
  if (e.target.classList.contains('modal')) {
    e.target.style.display = 'none';
  }
    });
  </script>
</AdminLayout>