---
import BaseLayout from '../layouts/BaseLayout.astro';
import AdminNav from '../components/AdminNav.astro';

const title = "DonnÃ©es Utilisateurs - Admin GLP-1";
const description = "Dashboard simple des donnÃ©es utilisateurs du site GLP-1 France";
---

<BaseLayout title={title} description={description}>
  <AdminNav />
  
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="container mx-auto px-4 max-w-4xl">
      
      <!-- Header -->
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-gray-800 mb-4">ðŸ“Š DonnÃ©es Utilisateurs</h1>
        <p class="text-lg text-gray-600">Suivi simple des donnÃ©es de contact</p>
      </div>

      <!-- Quick Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-blue-500">
          <div class="flex items-center">
            <div class="p-3 bg-blue-100 rounded-full">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 7.89a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Messages Contact</p>
              <p class="text-2xl font-bold text-gray-900" id="contact-count">--</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-green-500">
          <div class="flex items-center">
            <div class="p-3 bg-green-100 rounded-full">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Newsletter</p>
              <p class="text-2xl font-bold text-gray-900" id="newsletter-count">--</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-purple-500">
          <div class="flex items-center">
            <div class="p-3 bg-purple-100 rounded-full">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Unique</p>
              <p class="text-2xl font-bold text-gray-900" id="total-emails">--</p>
            </div>
          </div>
        </div>
      </div>

      <!-- DonnÃ©es dÃ©taillÃ©es -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Liste des contacts -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold text-gray-800">ðŸ“§ Messages de Contact</h2>
            <button onclick="refreshData('contacts')" class="text-blue-600 hover:text-blue-800">ðŸ”„</button>
          </div>
          <div id="contacts-list" class="space-y-3 max-h-96 overflow-y-auto">
            <p class="text-gray-500">Chargement...</p>
          </div>
        </div>

        <!-- Liste Newsletter -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold text-gray-800">ðŸ“® Newsletter</h2>
            <button onclick="refreshData('newsletter')" class="text-blue-600 hover:text-blue-800">ðŸ”„</button>
          </div>
          <div id="newsletter-list" class="space-y-3 max-h-96 overflow-y-auto">
            <p class="text-gray-500">Chargement...</p>
          </div>
        </div>
      </div>

      <!-- Export simple -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-bold text-gray-800 mb-4">ðŸ“¤ Export</h2>
        <button onclick="exportEmails()" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors">
          ðŸ“Š Exporter tous les emails (CSV)
        </button>
      </div>

    </div>
  </div>
</BaseLayout>

<script>
  let currentData = null;

  // Charger les donnÃ©es depuis l'API
  async function loadData() {
    try {
      const response = await fetch('/api/user-management');
      if (!response.ok) throw new Error('Erreur de chargement');
      
      currentData = await response.json();
      updateStats();
      displayContacts();
      displayNewsletter();
    } catch (error) {
      console.error('Erreur:', error);
      showError('Erreur de chargement des donnÃ©es');
    }
  }

  function updateStats() {
    if (!currentData || !currentData.users) return;
    
    const users = currentData.users;
    const contacts = users.filter(u => u.events.some(e => e.type === 'contact'));
    const newsletters = users.filter(u => u.events.some(e => e.type === 'newsletter'));
    
    document.getElementById('contact-count').textContent = contacts.length;
    document.getElementById('newsletter-count').textContent = newsletters.length;
    document.getElementById('total-emails').textContent = users.length;
  }

  function displayContacts() {
    const container = document.getElementById('contacts-list');
    if (!currentData || !currentData.users) {
      container.innerHTML = '<p class="text-gray-500">Aucun message de contact</p>';
      return;
    }

    const contacts = currentData.users
      .filter(u => u.events.some(e => e.type === 'contact'))
      .slice(0, 10);

    if (contacts.length === 0) {
      container.innerHTML = '<p class="text-gray-500">Aucun message de contact</p>';
      return;
    }

    container.innerHTML = contacts.map(user => {
      const contactEvent = user.events.find(e => e.type === 'contact');
      return `
        <div class="p-3 border border-gray-200 rounded-lg">
          <div class="flex justify-between items-start mb-2">
            <h4 class="font-semibold text-gray-800">${contactEvent.data.name || 'Sans nom'}</h4>
            <span class="text-xs text-gray-500">${formatDate(contactEvent.timestamp)}</span>
          </div>
          <p class="text-sm text-gray-600 mb-1"><strong>Email:</strong> ${user.email}</p>
          <p class="text-sm text-gray-600">${contactEvent.data.subject || 'Sans sujet'}</p>
        </div>
      `;
    }).join('');
  }

  function displayNewsletter() {
    const container = document.getElementById('newsletter-list');
    if (!currentData || !currentData.users) {
      container.innerHTML = '<p class="text-gray-500">Aucune inscription newsletter</p>';
      return;
    }

    const newsletters = currentData.users
      .filter(u => u.events.some(e => e.type === 'newsletter'))
      .slice(0, 10);

    if (newsletters.length === 0) {
      container.innerHTML = '<p class="text-gray-500">Aucune inscription newsletter</p>';
      return;
    }

    container.innerHTML = newsletters.map(user => {
      const newsletterEvent = user.events.find(e => e.type === 'newsletter');
      return `
        <div class="p-3 border border-gray-200 rounded-lg">
          <div class="flex justify-between items-center">
            <div>
              <p class="font-semibold text-gray-800">${user.email}</p>
            </div>
            <span class="text-xs text-gray-500">${formatDate(newsletterEvent.timestamp)}</span>
          </div>
        </div>
      `;
    }).join('');
  }

  function formatDate(timestamp) {
    return new Date(timestamp).toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  function showError(message) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg z-50';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 5000);
  }

  async function refreshData(type = 'all') {
    await loadData();
    
    // Notification de succÃ¨s
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg z-50';
    notification.textContent = 'âœ… DonnÃ©es mises Ã  jour';
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 2000);
  }

  async function exportEmails() {
    if (!currentData || !currentData.users) {
      showError('Aucune donnÃ©e Ã  exporter');
      return;
    }

    try {
      // CrÃ©er le CSV
      let csvContent = 'Email,Type,Date,Nom,Sujet\n';
      
      currentData.users.forEach(user => {
        user.events.forEach(event => {
          const name = event.data.name || '';
          const subject = event.data.subject || '';
          csvContent += `"${user.email}","${event.type}","${formatDate(event.timestamp)}","${name}","${subject}"\n`;
        });
      });

      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `export-glp1-${new Date().toISOString().split('T')[0]}.csv`;
      a.click();
      window.URL.revokeObjectURL(url);
      
      // Notification
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg z-50';
      notification.textContent = 'âœ… Export CSV tÃ©lÃ©chargÃ©';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
      
    } catch (error) {
      console.error('Erreur export:', error);
      showError('Erreur lors de l\'export');
    }
  }

  // Initialisation
  document.addEventListener('DOMContentLoaded', function() {
    loadData();
  });
</script>

<style>
  .transition-colors {
    transition: background-color 0.2s ease;
  }
</style>
