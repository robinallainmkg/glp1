---
import BaseLayout from '../layouts/BaseLayout.astro';

const title = "Analytics & Données Utilisateurs - Admin GLP-1";
const description = "Dashboard de suivi des données utilisateurs, formulaires et newsletter du site GLP-1 France";
---

<BaseLayout title={title} description={description}>
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="container mx-auto px-4 max-w-6xl">
      
      <!-- Header -->
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-gray-800 mb-4">📊 Analytics & Données Utilisateurs</h1>
        <p class="text-lg text-gray-600">Suivi des formulaires, newsletter et engagement utilisateurs</p>
      </div>

      <!-- Quick Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-blue-500">
          <div class="flex items-center">
            <div class="p-3 bg-blue-100 rounded-full">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 7.89a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Messages Contact</p>
              <p class="text-2xl font-bold text-gray-900" id="contact-count">--</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-green-500">
          <div class="flex items-center">
            <div class="p-3 bg-green-100 rounded-full">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Newsletter</p>
              <p class="text-2xl font-bold text-gray-900" id="newsletter-count">--</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-pink-500">
          <div class="flex items-center">
            <div class="p-3 bg-pink-100 rounded-full">
              <svg class="w-6 h-6 text-pink-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Guide Téléchargés</p>
              <p class="text-2xl font-bold text-gray-900" id="guide-count">--</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-purple-500">
          <div class="flex items-center">
            <div class="p-3 bg-purple-100 rounded-full">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Emails</p>
              <p class="text-2xl font-bold text-gray-900" id="total-emails">--</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-yellow-500">
          <div class="flex items-center">
            <div class="p-3 bg-yellow-100 rounded-full">
              <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Cette Semaine</p>
              <p class="text-2xl font-bold text-gray-900" id="weekly-count">--</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Données détaillées -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Liste des contacts -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold text-gray-800">📧 Messages de Contact</h2>
            <button onclick="refreshData('contacts')" class="text-blue-600 hover:text-blue-800">🔄</button>
          </div>
          <div id="contacts-list" class="space-y-3 max-h-96 overflow-y-auto">
            <p class="text-gray-500">Chargement...</p>
          </div>
        </div>

        <!-- Liste Newsletter -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold text-gray-800">📮 Inscriptions Newsletter</h2>
            <button onclick="refreshData('newsletter')" class="text-blue-600 hover:text-blue-800">🔄</button>
          </div>
          <div id="newsletter-list" class="space-y-3 max-h-96 overflow-y-auto">
            <p class="text-gray-500">Chargement...</p>
          </div>
        </div>
      </div>

      <!-- Guide submissions -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-bold text-gray-800">📖 Téléchargements de Guide</h2>
          <button onclick="refreshData('guides')" class="text-blue-600 hover:text-blue-800">🔄</button>
        </div>
        <div id="guides-list" class="space-y-3 max-h-96 overflow-y-auto">
          <p class="text-gray-500">Chargement...</p>
        </div>
      </div>

      <!-- Configuration & Actions -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        
        <!-- Configuration Netlify -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-xl font-bold text-gray-800 mb-4">🔧 Configuration Netlify</h2>
          
          <div class="space-y-4">
            <div class="p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h3 class="font-semibold text-blue-800 mb-2">✅ Formulaires configurés</h3>
              <ul class="text-sm text-blue-700 space-y-1">
                <li>• Formulaire de contact: ✅ Activé</li>
                <li>• Newsletter footer: ✅ Activé</li>
                <li>• Guide beauté: ✅ Activé</li>
                <li>• Notifications email: ✅ robin@glp1-france.fr</li>
                <li>• Anti-spam: ✅ Honeypot activé</li>
              </ul>
            </div>

            <div class="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <h3 class="font-semibold text-yellow-800 mb-2">⚠️ Actions recommandées</h3>
              <ul class="text-sm text-yellow-700 space-y-1">
                <li>• Configurer l'API Netlify pour accès automatique</li>
                <li>• Mettre en place un service d'email marketing</li>
                <li>• Automatiser l'export des données</li>
              </ul>
            </div>
          </div>
        </div>

        <!-- Actions rapides -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-xl font-bold text-gray-800 mb-4">⚡ Actions Rapides</h2>
          
          <div class="space-y-3">
            <button onclick="exportEmails()" class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
              📧 Exporter les Emails (CSV)
            </button>
            
            <button onclick="generateReport()" class="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
              📊 Générer Rapport Analytics
            </button>
            
            <button onclick="viewNetlifyForms()" class="w-full bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
              🔗 Ouvrir Netlify Forms
            </button>
            
            <button onclick="runAnalyzer()" class="w-full bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 transition-colors">
              🤖 Lancer Script Analyzer
            </button>
          </div>

          <div class="mt-4 p-3 bg-gray-50 rounded-lg">
            <h4 class="font-semibold text-gray-700 mb-2">📁 Fichiers générés</h4>
            <div class="text-sm text-gray-600 space-y-1">
              <div>• user-data/emails-[date].csv</div>
              <div>• user-data/report-[date].md</div>
              <div>• user-data/export-mailchimp-[date].json</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Sujets de Contact les plus fréquents -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <h2 class="text-xl font-bold text-gray-800 mb-4">📈 Sujets de Contact Populaires</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div class="p-4 border border-gray-200 rounded-lg">
            <div class="flex justify-between items-center">
              <span class="text-sm font-medium text-gray-600">Questions générales GLP-1</span>
              <span class="text-lg font-bold text-blue-600">42%</span>
            </div>
            <div class="mt-2 bg-gray-200 rounded-full h-2">
              <div class="bg-blue-600 h-2 rounded-full" style="width: 42%"></div>
            </div>
          </div>

          <div class="p-4 border border-gray-200 rounded-lg">
            <div class="flex justify-between items-center">
              <span class="text-sm font-medium text-gray-600">Prix et où acheter</span>
              <span class="text-lg font-bold text-green-600">28%</span>
            </div>
            <div class="mt-2 bg-gray-200 rounded-full h-2">
              <div class="bg-green-600 h-2 rounded-full" style="width: 28%"></div>
            </div>
          </div>

          <div class="p-4 border border-gray-200 rounded-lg">
            <div class="flex justify-between items-center">
              <span class="text-sm font-medium text-gray-600">Effets secondaires</span>
              <span class="text-lg font-bold text-yellow-600">18%</span>
            </div>
            <div class="mt-2 bg-gray-200 rounded-full h-2">
              <div class="bg-yellow-600 h-2 rounded-full" style="width: 18%"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Instructions détaillées -->
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-bold text-gray-800 mb-4">📋 Instructions Complètes</h2>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div>
            <h3 class="font-semibold text-gray-700 mb-3">🎯 Récupération des Données</h3>
            <div class="space-y-2 text-sm text-gray-600">
              <p><strong>1. Via Netlify Dashboard:</strong></p>
              <p>• Aller dans Site Settings > Forms</p>
              <p>• Télécharger les CSV de chaque formulaire</p>
              <p>• Vérifier les notifications email</p>
              
              <p class="mt-3"><strong>2. Via Script automatique:</strong></p>
              <p>• Configurer NETLIFY_ACCESS_TOKEN</p>
              <p>• Lancer: <code class="bg-gray-100 px-1 rounded">node scripts/user-data-analyzer.mjs</code></p>
            </div>
          </div>

          <div>
            <h3 class="font-semibold text-gray-700 mb-3">📤 Export vers Services Email</h3>
            <div class="space-y-2 text-sm text-gray-600">
              <p><strong>Mailchimp:</strong></p>
              <p>• Utiliser le fichier export-mailchimp-[date].json</p>
              <p>• Importer via API ou interface</p>
              
              <p class="mt-3"><strong>ConvertKit:</strong></p>
              <p>• Utiliser le fichier export-convertkit-[date].json</p>
              <p>• Tags automatiques: 'glp1-france', 'website-signup'</p>
              
              <p class="mt-3"><strong>CSV Universel:</strong></p>
              <p>• Compatible avec tous les services</p>
              <p>• Format: email, source, date</p>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
</BaseLayout>

<script>
  let currentData = null;

  // Charger les données depuis l'API
  async function loadData() {
    try {
      const response = await fetch('/api/admin-data?type=all&auth=admin-glp1-2025');
      if (!response.ok) throw new Error('Erreur de chargement');
      
      currentData = await response.json();
      updateStats();
      displayContacts();
      displayNewsletter();
      displayGuides();
    } catch (error) {
      console.error('Erreur:', error);
      showError('Erreur de chargement des données');
    }
  }

  function updateStats() {
    if (!currentData || !currentData.stats) return;
    
    const stats = currentData.stats;
    document.getElementById('contact-count').textContent = stats.total_contacts || '0';
    document.getElementById('newsletter-count').textContent = stats.total_newsletter || '0';
    document.getElementById('guide-count').textContent = stats.total_guides || '0';
    document.getElementById('total-emails').textContent = stats.total_emails || '0';
    document.getElementById('weekly-count').textContent = 
      (stats.last_7_days.contacts + stats.last_7_days.newsletter + stats.last_7_days.guides) || '0';
  }

  function displayContacts() {
    const container = document.getElementById('contacts-list');
    if (!currentData.recent_contacts || currentData.recent_contacts.length === 0) {
      container.innerHTML = '<p class="text-gray-500">Aucun message de contact</p>';
      return;
    }

    container.innerHTML = currentData.recent_contacts.map(contact => `
      <div class="p-3 border border-gray-200 rounded-lg">
        <div class="flex justify-between items-start mb-2">
          <h4 class="font-semibold text-gray-800">${contact.data.name}</h4>
          <span class="text-xs text-gray-500">${formatDate(contact.timestamp)}</span>
        </div>
        <p class="text-sm text-gray-600 mb-2"><strong>Email:</strong> ${contact.data.email}</p>
        <p class="text-sm text-gray-600 mb-2"><strong>Sujet:</strong> ${contact.data.subject}</p>
        <p class="text-sm text-gray-700">${contact.data.message.substring(0, 100)}${contact.data.message.length > 100 ? '...' : ''}</p>
        ${contact.data.newsletter_signup ? '<span class="inline-block mt-2 px-2 py-1 bg-green-100 text-green-700 text-xs rounded">📮 Newsletter</span>' : ''}
      </div>
    `).join('');
  }

  function displayNewsletter() {
    const container = document.getElementById('newsletter-list');
    if (!currentData.recent_newsletter || currentData.recent_newsletter.length === 0) {
      container.innerHTML = '<p class="text-gray-500">Aucune inscription newsletter</p>';
      return;
    }

    container.innerHTML = currentData.recent_newsletter.map(subscriber => `
      <div class="p-3 border border-gray-200 rounded-lg">
        <div class="flex justify-between items-center">
          <div>
            <p class="font-semibold text-gray-800">${subscriber.email}</p>
            <p class="text-xs text-gray-500">Source: ${getSourceLabel(subscriber.source)}</p>
          </div>
          <span class="text-xs text-gray-500">${formatDate(subscriber.timestamp)}</span>
        </div>
      </div>
    `).join('');
  }

  function displayGuides() {
    const container = document.getElementById('guides-list');
    if (!currentData.recent_guides || currentData.recent_guides.length === 0) {
      container.innerHTML = '<p class="text-gray-500">Aucun téléchargement de guide</p>';
      return;
    }

    container.innerHTML = currentData.recent_guides.map(guide => `
      <div class="p-3 border border-gray-200 rounded-lg">
        <div class="flex justify-between items-start mb-2">
          <h4 class="font-semibold text-gray-800">${guide.data.name}</h4>
          <span class="text-xs text-gray-500">${formatDate(guide.timestamp)}</span>
        </div>
        <p class="text-sm text-gray-600 mb-2"><strong>Email:</strong> ${guide.data.email}</p>
        <p class="text-sm text-gray-600 mb-2"><strong>Traitement:</strong> ${guide.data.treatment || 'Non spécifié'}</p>
        ${guide.data.concerns && guide.data.concerns.length > 0 ? 
          `<p class="text-sm text-gray-600 mb-2"><strong>Préoccupations:</strong> ${guide.data.concerns.join(', ')}</p>` : ''}
        ${guide.data.newsletter_consent ? '<span class="inline-block mt-2 px-2 py-1 bg-green-100 text-green-700 text-xs rounded">📮 Newsletter</span>' : ''}
      </div>
    `).join('');
  }

  function formatDate(timestamp) {
    return new Date(timestamp).toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  function getSourceLabel(source) {
    const labels = {
      'newsletter-footer': 'Newsletter Footer',
      'contact-form': 'Formulaire Contact',
      'guide-beauty-form': 'Guide Beauté'
    };
    return labels[source] || source;
  }

  function showError(message) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg z-50';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 5000);
  }

  async function refreshData(type = 'all') {
    try {
      const response = await fetch(`/api/admin-data?type=${type}&auth=admin-glp1-2025`);
      if (!response.ok) throw new Error('Erreur de chargement');
      
      const data = await response.json();
      
      if (type === 'all') {
        currentData = data;
        updateStats();
        displayContacts();
        displayNewsletter();
        displayGuides();
      } else {
        // Mettre à jour seulement la section demandée
        currentData[`recent_${type}`] = data.data;
        if (type === 'contacts') displayContacts();
        else if (type === 'newsletter') displayNewsletter();
        else if (type === 'guides') displayGuides();
      }
      
      // Notification de succès
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg z-50';
      notification.textContent = '✅ Données mises à jour';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 2000);
      
    } catch (error) {
      console.error('Erreur refresh:', error);
      showError('Erreur de rafraîchissement');
    }
  }

  async function exportEmails() {
    try {
      const [contactsRes, newsletterRes, guidesRes] = await Promise.all([
        fetch('/api/admin-data?type=contacts&auth=admin-glp1-2025'),
        fetch('/api/admin-data?type=newsletter&auth=admin-glp1-2025'),
        fetch('/api/admin-data?type=guides&auth=admin-glp1-2025')
      ]);

      const [contacts, newsletter, guides] = await Promise.all([
        contactsRes.json(),
        newsletterRes.json(),
        guidesRes.json()
      ]);

      // Créer le CSV
      let csvContent = 'Email,Nom,Source,Date,Sujet/Traitement,Préoccupations\n';
      
      // Ajouter les contacts
      contacts.data.forEach(contact => {
        csvContent += `"${contact.data.email}","${contact.data.name}","Contact","${formatDate(contact.timestamp)}","${contact.data.subject}",""\n`;
      });
      
      // Ajouter la newsletter
      newsletter.data.forEach(sub => {
        csvContent += `"${sub.email}","","Newsletter","${formatDate(sub.timestamp)}","",""\n`;
      });
      
      // Ajouter les guides
      guides.data.forEach(guide => {
        const concerns = guide.data.concerns ? guide.data.concerns.join(';') : '';
        csvContent += `"${guide.data.email}","${guide.data.name}","Guide","${formatDate(guide.timestamp)}","${guide.data.treatment || ''}","${concerns}"\n`;
      });

      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `export-glp1-${new Date().toISOString().split('T')[0]}.csv`;
      a.click();
      window.URL.revokeObjectURL(url);
      
      // Notification
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg z-50';
      notification.textContent = '✅ Export CSV téléchargé';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
      
    } catch (error) {
      console.error('Erreur export:', error);
      showError('Erreur lors de l\'export');
    }
  }

  function generateReport() {
    if (!currentData) {
      showError('Données non chargées');
      return;
    }

    const stats = currentData.stats;
    const report = `# Rapport Analytics GLP-1 France
Date: ${new Date().toLocaleDateString('fr-FR')}

## Résumé Général
- Messages contact: ${stats.total_contacts}
- Inscriptions newsletter: ${stats.total_newsletter}
- Téléchargements guide: ${stats.total_guides}
- Total emails uniques: ${stats.total_emails}

## Cette Semaine (7 derniers jours)
- Nouveaux contacts: ${stats.last_7_days.contacts}
- Nouvelles inscriptions newsletter: ${stats.last_7_days.newsletter}
- Nouveaux téléchargements guide: ${stats.last_7_days.guides}

## Recommandations
- Améliorer le taux de conversion newsletter
- Optimiser les formulaires pour mobile
- Créer plus de contenu sur les sujets populaires

---
Généré automatiquement le ${new Date().toLocaleString('fr-FR')}`;

    const blob = new Blob([report], { type: 'text/markdown' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `rapport-glp1-${new Date().toISOString().split('T')[0]}.md`;
    a.click();
    window.URL.revokeObjectURL(url);
    
    // Notification
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg z-50';
    notification.textContent = '📊 Rapport généré';
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  function viewNetlifyForms() {
    // Rediriger vers la page de données locale
    window.open('/admin-user-data/', '_self');
  }

  function runAnalyzer() {
    alert('🤖 Les données sont maintenant collectées automatiquement via les APIs.\n\nPour exporter:\n1. Cliquez sur "Exporter les Emails"\n2. Les fichiers sont générés en temps réel\n3. Format CSV compatible avec tous les services');
  }

  // Initialisation
  document.addEventListener('DOMContentLoaded', function() {
    loadData();
    
    // Mise à jour automatique toutes les 5 minutes
    setInterval(loadData, 5 * 60 * 1000);
  });
</script>

<style>
  code {
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
  }
  
  .transition-colors {
    transition: background-color 0.2s ease;
  }
</style>
</BaseLayout>
