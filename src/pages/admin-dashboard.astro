---
import BaseLayout from '../layouts/BaseLayout.astro';
import fs from 'node:fs';
import path from 'node:path';

// Charger la base de données d'articles
const databasePath = path.resolve(process.cwd(), 'data/articles-database.json');
let database = { categories: [], allArticles: [], totalArticles: 0, totalCategories: 0 };

try {
  const rawData = fs.readFileSync(databasePath, 'utf-8');
  database = JSON.parse(rawData);
} catch (error) {
  console.error('Erreur lecture base de données:', error);
}

const themeMapping = {
  'alternatives-glp1': '🌱',
  'glp1-perte-de-poids': '🏃', 
  'effets-secondaires-glp1': '⚠️',
  'glp1-diabete': '🩺',
  'medicaments-glp1': '💊',
  'medecins-glp1-france': '👨‍⚕️',
  'recherche-glp1': '🔬',
  'regime-glp1': '🍎',
  'glp1-cout': '💰'
};

const collectionsWithIcons = database.categories.map(category => ({
  ...category,
  icon: themeMapping[category.name] || '📄'
}));

const allArticlesEnriched = database.allArticles?.map(article => ({
  ...article,
  collection: collectionsWithIcons.find(c => c.name === article.category)
})) || [];
---

<BaseLayout 
  title="Dashboard Admin - GLP1 France"
  description="Interface de gestion des collections et articles"
  keywords="admin, dashboard, gestion, collections, articles">

<div class="admin-container">
  <!-- Header simplifié -->
  <header class="admin-header">
    <div class="admin-header-content">
      <div class="header-left">
        <h1>🎛️ Dashboard Admin</h1>
        <span class="site-badge">GLP1 France</span>
      </div>
      <div class="header-stats">
        <div class="stat-item">
          <span class="stat-number">{database.totalCategories}</span>
          <span class="stat-label">Collections</span>
        </div>
        <div class="stat-item">
          <span class="stat-number">{database.totalArticles}</span>
          <span class="stat-label">Articles</span>
        </div>
      </div>
    </div>
  </header>

  <!-- Navigation Tabs -->
  <nav class="admin-nav">
    <button class="nav-tab active" data-tab="collections">
      📂 Collections
    </button>
    <button class="nav-tab" data-tab="articles">
      📝 Articles
    </button>
    <button class="nav-tab" data-tab="create">
      ➕ Créer
    </button>
  </nav>

  <!-- Collections Tab -->
  <section id="collections-tab" class="tab-content active">
    <div class="section-header">
      <h2>📂 Gestion des Collections</h2>
      <button class="btn-primary" onclick="openCreateCollectionModal()">
        ➕ Nouvelle Collection
      </button>
    </div>

    <div class="collections-grid">
      {collectionsWithIcons.map(collection => (
        <div class="collection-card" data-collection={collection.name}>
          <div class="collection-header">
            <div class="collection-badge">
              {collection.icon}
            </div>
            <div class="collection-info">
              <h3>{collection.displayName}</h3>
              <span class="collection-slug">{collection.name}</span>
              <span class="article-count">{collection.articleCount} articles</span>
            </div>
          </div>
          
          <div class="collection-description">
            Collection contenant {collection.articleCount} articles sur les thématiques liées au GLP-1.
          </div>

          <div class="collection-actions">
            <button class="btn-secondary" onclick={`viewCollectionArticles('${collection.name}')`}>
              👁️ Voir Articles
            </button>
            <button class="btn-secondary" onclick={`editCollection('${collection.name}')`}>
              ✏️ Modifier
            </button>
            <button class="btn-danger" onclick={`deleteCollection('${collection.name}')`}>
              🗑️ Supprimer
            </button>
          </div>
        </div>
      ))}
    </div>
  </section>

  <!-- Articles Tab -->
  <section id="articles-tab" class="tab-content">
    <div class="section-header">
      <h2>📝 Gestion des Articles</h2>
      <div class="articles-filters">
        <select id="filter-collection">
          <option value="">Toutes les collections</option>
          {collectionsWithIcons.map(collection => (
            <option value={collection.name}>{collection.displayName}</option>
          ))}
          ))}
        </select>
        <input type="text" id="search-articles" placeholder="Rechercher par titre..." />
      </div>
      <button class="btn-primary" onclick="openCreateArticleModal()">
        ➕ Nouvel Article
      </button>
    </div>

    <div class="articles-table-container">
      <table class="articles-table">
        <thead>
          <tr>
            <th>Article</th>
            <th>Collection</th>
            <th>Auteur</th>
            <th>Mots-clés</th>
            <th>Temps</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {allArticlesEnriched.map(article => (
            <tr class="article-row" data-collection={article.category} data-author={article.author}>
              <td class="article-title-cell">
                <div class="article-title-main">{article.title}</div>
                <div class="article-description-preview">{article.description}</div>
                <div class="article-slug">{article.slug}</div>
              </td>
              <td class="collection-cell">
                <div class="collection-badge-small">
                  {article.collection?.icon || '📄'}
                </div>
                <span>{article.collection?.displayName || article.category}</span>
              </td>
              <td>{article.author}</td>
              <td class="keywords-cell">
                <div class="keywords-tags">
                  {(typeof article.keywords === 'string' ? article.keywords.split(',') : (Array.isArray(article.keywords) ? article.keywords : [])).slice(0, 2).map(keyword => (
                    <span class="keyword-tag">{keyword.trim()}</span>
                  ))}
                </div>
              </td>
              <td class="reading-time-cell">{article.readingTime}min</td>
              <td class="actions-cell">
                <button class="btn-action" onclick={`editArticle('${article.category}', '${article.slug}')`} title="Modifier">
                  ✏️
                </button>
                <button class="btn-action" onclick={`viewArticle('${article.url}')`} title="Voir">
                  👁️
                </button>
                <button class="btn-action btn-danger" onclick={`deleteArticle('${article.category}', '${article.slug}')`} title="Supprimer">
                  🗑️
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </section>

  <!-- Create Tab -->
  <section id="create-tab" class="tab-content">
    <div class="section-header">
      <h2>➕ Créer Nouveau Contenu</h2>
    </div>

    <div class="create-options">
      <div class="create-card" onclick="openCreateCollectionModal()">
        <div class="create-icon">📂</div>
        <h3>Nouvelle Collection</h3>
        <p>Créer une nouvelle collection avec son thème</p>
      </div>
      
      <div class="create-card" onclick="openCreateArticleModal()">
        <div class="create-icon">📝</div>
        <h3>Nouvel Article</h3>
        <p>Ajouter un article à une collection existante</p>
      </div>
    </div>
  </section>
</div>

<!-- Modal Universelle -->
<div id="modal-overlay" class="modal-overlay">
  <div class="modal">
    <div class="modal-header">
      <h3 id="modal-title">Modal</h3>
      <button class="modal-close" onclick="closeModal()">✕</button>
    </div>
    <div class="modal-content" id="modal-content">
      <!-- Contenu dynamique -->
    </div>
    <div class="modal-actions">
      <button class="btn-secondary" onclick="closeModal()">Annuler</button>
      <button class="btn-primary" id="modal-save-btn">Sauvegarder</button>
    </div>
  </div>

  <!-- Create Collection Modal -->
  <div id="create-collection-modal" class="modal">
    <div class="modal-header">
      <h3>➕ Nouvelle Collection</h3>
      <button class="modal-close" onclick="closeCreateCollectionModal()">✕</button>
    </div>
    <div class="modal-content">
      <form id="create-collection-form">
        <div class="form-group">
          <label for="collection-name">Nom de la collection *</label>
          <input type="text" id="collection-name" name="name" required placeholder="ex: glp1-effets-secondaires">
        </div>
        
        <div class="form-group">
          <label for="collection-display-name">Nom d'affichage *</label>
          <input type="text" id="collection-display-name" name="displayName" required placeholder="ex: Effets Secondaires GLP1">
        </div>
        
        <div class="form-group">
          <label for="collection-description">Description</label>
          <textarea id="collection-description" name="description" rows="3" placeholder="Description de la collection..."></textarea>
        </div>
        
        <div class="form-group">
          <label for="collection-icon">Icône *</label>
          <select id="collection-icon" name="icon" required>
            <option value="">Choisir une icône</option>
            <option value="💊">💊 Médicaments</option>
            <option value="⚠️">⚠️ Effets secondaires</option>
            <option value="💰">💰 Coût/Prix</option>
            <option value="🩺">🩺 Médecins</option>
            <option value="🔬">🔬 Recherche</option>
            <option value="🥗">🥗 Régime</option>
            <option value="📏">📏 Perte de poids</option>
            <option value="🩸">🩸 Diabète</option>
            <option value="🔄">🔄 Alternatives</option>
            <option value="👥">👥 Experts</option>
            <option value="💉">💉 Injections</option>
            <option value="📊">📊 Études</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="collection-color">Couleur du thème</label>
          <select id="collection-color" name="color">
            <option value="blue">🔵 Bleu (par défaut)</option>
            <option value="green">🟢 Vert</option>
            <option value="purple">🟣 Violet</option>
            <option value="red">🔴 Rouge</option>
            <option value="orange">🟠 Orange</option>
            <option value="pink">🩷 Rose</option>
            <option value="teal">🟡 Teal</option>
            <option value="indigo">🟦 Indigo</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="collection-meta-title">Meta Title (SEO)</label>
          <input type="text" id="collection-meta-title" name="metaTitle" placeholder="Titre pour les moteurs de recherche">
        </div>
        
        <div class="form-group">
          <label for="collection-meta-description">Meta Description (SEO)</label>
          <textarea id="collection-meta-description" name="metaDescription" rows="2" placeholder="Description pour les moteurs de recherche..."></textarea>
        </div>
      </form>
    </div>
    <div class="modal-actions">
      <button class="btn-secondary" onclick="closeCreateCollectionModal()">Annuler</button>
      <button class="btn-primary" onclick="saveNewCollection()">Créer la Collection</button>
    </div>
  </div>
</div>

<style>
  .admin-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  .admin-header {
    background: linear-gradient(135deg, #0f172a, #1e293b, #334155);
    color: white;
    padding: 2.5rem;
    border-radius: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    border: 1px solid rgba(255, 255, 255, 0.1);
    position: relative;
    overflow: hidden;
  }

  .admin-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
  }

  .admin-header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .header-left h1 {
    font-size: 2rem;
    margin: 0;
  }

  .site-badge {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.3), rgba(16, 185, 129, 0.3));
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 2rem;
    font-size: 0.875rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.95);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .header-stats {
    display: flex;
    gap: 2rem;
  }

  .stat-item {
    text-align: center;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    min-width: 80px;
  }

  .stat-number {
    display: block;
    font-size: 1.75rem;
    font-weight: 700;
    background: linear-gradient(135deg, #22d3ee, #3b82f6);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    font-size: 0.875rem;
    opacity: 0.9;
    color: rgba(255, 255, 255, 0.8);
    font-weight: 500;
  }

  .admin-nav {
    display: flex;
    background: white;
    border-radius: 0.75rem;
    padding: 0.25rem;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  }

  .nav-tab {
    flex: 1;
    padding: 1rem;
    border: none;
    background: transparent;
    cursor: pointer;
    border-radius: 0.5rem;
    font-weight: 500;
    transition: all 0.3s;
  }

  .nav-tab.active {
    background: #2563eb;
    color: white;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .articles-filters {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .articles-filters select,
  .articles-filters input {
    padding: 0.5rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    font-size: 0.875rem;
  }

  /* Boutons */
  .btn-primary {
    background: #2563eb;
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s;
  }

  .btn-primary:hover {
    background: #1d4ed8;
    transform: translateY(-1px);
  }

  .btn-secondary {
    background: #6b7280;
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.375rem;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s;
    font-size: 0.875rem;
  }

  .btn-secondary:hover {
    background: #4b5563;
  }

  .btn-danger {
    background: #dc2626;
    color: white;
  }

  .btn-danger:hover {
    background: #b91c1c;
  }

  .btn-action {
    background: #f3f4f6;
    border: none;
    width: 2rem;
    height: 2rem;
    border-radius: 0.375rem;
    cursor: pointer;
    margin: 0 0.125rem;
    transition: all 0.2s;
  }

  .btn-action:hover {
    background: #e5e7eb;
    transform: scale(1.1);
  }

  .btn-action.btn-danger:hover {
    background: #fecaca;
  }

  /* Collections */
  .collections-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
  }

  .collection-card {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
    transition: all 0.3s;
  }

  .collection-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1);
  }

  .collection-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .collection-badge {
    width: 3rem;
    height: 3rem;
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    background: linear-gradient(135deg, #6b7280, #9ca3af);
    flex-shrink: 0;
  }

  .collection-badge-small {
    width: 2rem;
    height: 2rem;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
    background: #f3f4f6;
    margin-right: 0.5rem;
  }

  .collection-info {
    flex: 1;
  }

  .collection-info h3 {
    margin: 0 0 0.25rem 0;
    font-size: 1.125rem;
    color: #1e293b;
  }

  .collection-slug {
    font-size: 0.75rem;
    color: #6b7280;
    font-family: monospace;
    display: block;
  }

  .article-count {
    background: #dbeafe;
    color: #1d4ed8;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    font-weight: 500;
    margin-top: 0.25rem;
    display: inline-block;
  }

  .collection-description {
    color: #6b7280;
    margin-bottom: 1rem;
    font-size: 0.875rem;
    line-height: 1.4;
  }

  .collection-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  /* Articles */
  .articles-table-container {
    background: white;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  }

  .articles-table {
    width: 100%;
    border-collapse: collapse;
  }

  .articles-table th {
    background: #f8fafc;
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: #374151;
    border-bottom: 1px solid #e5e7eb;
  }

  .articles-table td {
    padding: 1rem;
    border-bottom: 1px solid #f3f4f6;
    vertical-align: top;
  }

  .article-title-main {
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 0.25rem;
  }

  .article-description-preview {
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 0.25rem;
  }

  .article-slug {
    font-size: 0.75rem;
    color: #9ca3af;
    font-family: monospace;
  }

  .collection-cell {
    display: flex;
    align-items: center;
  }

  .keywords-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .keyword-tag {
    background: #e0e7ff;
    color: #3730a3;
    padding: 0.125rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
  }

  .actions-cell {
    display: flex;
    gap: 0.25rem;
  }

  /* Create Options */
  .create-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .create-card {
    background: white;
    padding: 2rem;
    border-radius: 1rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  }

  .create-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1);
  }

  .create-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  /* Modal */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .modal {
    background: white;
    border-radius: 1rem;
    width: 90vw;
    max-width: 600px;
    max-height: 80vh;
    overflow: hidden;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #6b7280;
  }

  .modal-content {
    padding: 1.5rem;
    overflow-y: auto;
    max-height: 60vh;
  }

  .modal-actions {
    padding: 1.5rem;
    border-top: 1px solid #e5e7eb;
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
  }

  /* Formulaires */
  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #374151;
  }

  .form-input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: border-color 0.2s;
  }

  .form-input:focus {
    outline: none;
    border-color: #2563eb;
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }

  /* Formulaire de création de collection */
  #create-collection-form .form-group {
    margin-bottom: 1.5rem;
  }

  #create-collection-form input,
  #create-collection-form select,
  #create-collection-form textarea {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid #e5e7eb;
    border-radius: 0.75rem;
    font-size: 0.875rem;
    transition: all 0.2s;
    background: white;
  }

  #create-collection-form input:focus,
  #create-collection-form select:focus,
  #create-collection-form textarea:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
    transform: translateY(-1px);
  }

  #create-collection-form label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: #1f2937;
    font-size: 0.875rem;
  }

  #create-collection-form textarea {
    resize: vertical;
    min-height: 80px;
  }

  /* Modal amélioré */
  .modal {
    background: white;
    border-radius: 1.5rem;
    width: 90vw;
    max-width: 700px;
    max-height: 85vh;
    overflow: hidden;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .modal-header h3 {
    color: #1f2937;
    font-size: 1.25rem;
    font-weight: 700;
    margin: 0;
  }

  /* Modal de création de collection spécifique */
  #create-collection-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 2rem;
  }

  #create-collection-modal.show {
    display: flex;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Dashboard chargé');
    initializeTabs();
    setupEventListeners();
  });

  function initializeTabs() {
    document.querySelectorAll('.nav-tab').forEach(tab => {
      tab.addEventListener('click', function() {
        const tabName = this.getAttribute('data-tab');
        showTab(tabName);
      });
    });

    showTab('collections');
  }

  function setupEventListeners() {
    const filterCollection = document.getElementById('filter-collection');
    const searchInput = document.getElementById('search-articles');
    
    if (filterCollection) {
      filterCollection.addEventListener('change', filterArticles);
    }
    
    if (searchInput) {
      searchInput.addEventListener('input', filterArticles);
    }

    const modalOverlay = document.getElementById('modal-overlay');
    if (modalOverlay) {
      modalOverlay.addEventListener('click', function(e) {
        if (e.target === modalOverlay) {
          closeModal();
        }
      });
    }
  }

  function showTab(tabName) {
    console.log('Basculer vers onglet:', tabName);
    
    document.querySelectorAll('.tab-content').forEach(tab => {
      tab.classList.remove('active');
    });
    document.querySelectorAll('.nav-tab').forEach(tab => {
      tab.classList.remove('active');
    });

    const targetTab = document.getElementById(tabName + '-tab');
    const targetButton = document.querySelector(`[data-tab="${tabName}"]`);
    
    if (targetTab) {
      targetTab.classList.add('active');
    }
    
    if (targetButton) {
      targetButton.classList.add('active');
    }
  }

  function filterArticles() {
    const collectionFilter = document.getElementById('filter-collection')?.value || '';
    const searchTerm = document.getElementById('search-articles')?.value?.toLowerCase() || '';

    document.querySelectorAll('.article-row').forEach(row => {
      const collection = row.dataset.collection || '';
      const titleElement = row.querySelector('.article-title-main');
      const descriptionElement = row.querySelector('.article-description-preview');
      
      const title = titleElement ? titleElement.textContent.toLowerCase() : '';
      const description = descriptionElement ? descriptionElement.textContent.toLowerCase() : '';

      const matchCollection = !collectionFilter || collection === collectionFilter;
      const matchSearch = !searchTerm || title.includes(searchTerm) || description.includes(searchTerm);

      row.style.display = matchCollection && matchSearch ? '' : 'none';
    });
  }

  function openModal(title, content) {
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('modal-content');
    const modalOverlay = document.getElementById('modal-overlay');
    
    if (modalTitle) modalTitle.textContent = title;
    if (modalContent) modalContent.innerHTML = content;
    if (modalOverlay) modalOverlay.style.display = 'flex';
  }

  function closeModal() {
    const modalOverlay = document.getElementById('modal-overlay');
    if (modalOverlay) modalOverlay.style.display = 'none';
  }

  // FONCTIONS COLLECTIONS
  function openCreateCollectionModal() {
    const modal = document.getElementById('create-collection-modal');
    if (modal) {
      modal.style.display = 'flex';
      
      // Auto-génération du slug
      const nameInput = document.getElementById('collection-name');
      const displayNameInput = document.getElementById('collection-display-name');
      
      if (displayNameInput) {
        displayNameInput.addEventListener('input', function() {
          if (nameInput) {
            const slug = this.value.toLowerCase()
              .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
              .replace(/[^a-z0-9\s-]/g, '')
              .replace(/\s+/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-|-$/g, '');
            nameInput.value = slug;
          }
        });
      }
    }
  }

  function closeCreateCollectionModal() {
    const modal = document.getElementById('create-collection-modal');
    if (modal) {
      modal.style.display = 'none';
      // Reset form
      const form = document.getElementById('create-collection-form');
      if (form) form.reset();
    }
  }

  function saveNewCollection() {
    const form = document.getElementById('create-collection-form');
    const formData = new FormData(form);
    
    const collectionData = {
      name: formData.get('name'),
      displayName: formData.get('displayName'),
      description: formData.get('description'),
      icon: formData.get('icon'),
      color: formData.get('color') || 'blue',
      metaTitle: formData.get('metaTitle'),
      metaDescription: formData.get('metaDescription')
    };

    // Validation
    if (!collectionData.name || !collectionData.displayName || !collectionData.icon) {
      alert('Veuillez remplir tous les champs obligatoires (marqués *)');
      return;
    }

    console.log('Création collection:', collectionData);
    alert('Collection créée avec succès ! (Fonctionnalité backend à implémenter)');
    closeCreateCollectionModal();
    
    // TODO: Ici on ajouterait l'appel API pour créer la collection
    // addCollectionToDatabase(collectionData);
  }

  function viewCollectionArticles(collectionName) {
    showTab('articles');
    
    // Filtrer les articles par collection
    const filterSelect = document.getElementById('filter-collection');
    if (filterSelect) {
      filterSelect.value = collectionName;
      filterArticles();
    }
    
    // Scroll vers le haut de la section articles
    const articlesSection = document.getElementById('articles-tab');
    if (articlesSection) {
      articlesSection.scrollIntoView({ behavior: 'smooth' });
    }
    setTimeout(() => {
      const filterElement = document.getElementById('filter-collection');
      if (filterElement) {
        filterElement.value = collectionName;
        filterArticles();
      }
    }, 100);
  }

  function editCollection(collectionName) {
    const content = `
      <div class="form-group">
        <label>Nom affiché:</label>
        <input type="text" id="edit-collection-name" value="Collection ${collectionName}" class="form-input">
      </div>
      <div class="form-group">
        <label>Slug technique:</label>
        <input type="text" value="${collectionName}" class="form-input" readonly>
      </div>
      <div class="form-group">
        <label>Description:</label>
        <textarea id="edit-collection-description" class="form-input" rows="3">Description de la collection...</textarea>
      </div>
    `;

    openModal('✏️ Modifier Collection', content);
    
    const saveBtn = document.getElementById('modal-save-btn');
    if (saveBtn) {
      saveBtn.onclick = () => {
        console.log('Modification collection:', collectionName);
        alert('Collection modifiée ! (Backend à implémenter)');
        closeModal();
      };
    }
  }

  function deleteCollection(collectionName) {
    if (confirm(`Êtes-vous sûr de vouloir supprimer la collection "${collectionName}" ?`)) {
      console.log('Suppression collection:', collectionName);
      alert('Collection supprimée ! (Backend à implémenter)');
    }
  }

  // FONCTIONS ARTICLES
  function openCreateArticleModal() {
    const content = `
      <div class="form-group">
        <label for="new-article-title">Titre de l'article:</label>
        <input type="text" id="new-article-title" placeholder="Ex: Ozempic et perte de poids" class="form-input">
      </div>
      <div class="form-group">
        <label for="new-article-collection">Collection:</label>
        <select id="new-article-collection" class="form-input">
          <option value="alternatives-glp1">🌱 Alternatives GLP1</option>
          <option value="glp1-perte-de-poids">🏃 GLP1 Perte de poids</option>
          <option value="effets-secondaires-glp1">⚠️ Effets secondaires</option>
          <option value="glp1-diabete">🩺 GLP1 Diabète</option>
          <option value="medicaments-glp1">💊 Médicaments GLP1</option>
          <option value="medecins-glp1-france">👨‍⚕️ Médecins France</option>
          <option value="recherche-glp1">🔬 Recherche GLP1</option>
          <option value="regime-glp1">🍎 Régime GLP1</option>
          <option value="glp1-cout">💰 Coût GLP1</option>
        </select>
      </div>
      <div class="form-group">
        <label for="new-article-description">Description SEO:</label>
        <textarea id="new-article-description" placeholder="Description pour les moteurs de recherche..." class="form-input" rows="2"></textarea>
      </div>
      <div class="form-group">
        <label for="new-article-author">Auteur:</label>
        <input type="text" id="new-article-author" placeholder="Dr. Nom Prénom" class="form-input">
      </div>
      <div class="form-group">
        <label for="new-article-keywords">Mots-clés:</label>
        <input type="text" id="new-article-keywords" placeholder="glp1, perte poids, médicament" class="form-input">
      </div>
      <div class="form-group">
        <label for="new-article-content">Contenu (Markdown):</label>
        <textarea id="new-article-content" placeholder="# Titre\n\nContenu de l'article en markdown..." class="form-input" rows="10"></textarea>
      </div>
    `;

    openModal('➕ Créer un Article', content);
    
    const saveBtn = document.getElementById('modal-save-btn');
    if (saveBtn) {
      saveBtn.onclick = saveNewArticle;
    }
  }

  function saveNewArticle() {
    const title = document.getElementById('new-article-title')?.value;
    const collection = document.getElementById('new-article-collection')?.value;
    const description = document.getElementById('new-article-description')?.value;
    const author = document.getElementById('new-article-author')?.value;
    const keywords = document.getElementById('new-article-keywords')?.value;
    const content = document.getElementById('new-article-content')?.value;

    if (!title || !collection || !content) {
      alert('Veuillez remplir tous les champs obligatoires');
      return;
    }

    const slug = title.toLowerCase()
      .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');

    console.log('Création article:', { title, slug, collection, description, author, keywords, content });
    alert('Article créé ! (Backend à implémenter)');
    closeModal();
  }

  function editArticle(collection, slug) {
    const content = `
      <div class="form-group">
        <label>Titre:</label>
        <input type="text" id="edit-article-title" value="Article ${slug}" class="form-input">
      </div>
      <div class="form-group">
        <label>Slug:</label>
        <input type="text" value="${slug}" class="form-input" readonly>
      </div>
      <div class="form-group">
        <label>Collection:</label>
        <input type="text" value="${collection}" class="form-input" readonly>
      </div>
      <div class="form-group">
        <label>Description:</label>
        <textarea id="edit-article-description" class="form-input" rows="2">Description de l'article...</textarea>
      </div>
      <div class="form-group">
        <label>Contenu (Markdown):</label>
        <textarea id="edit-article-content" class="form-input" rows="15"># Titre\n\nContenu de l'article...</textarea>
      </div>
    `;

    openModal('✏️ Modifier Article', content);
    
    const saveBtn = document.getElementById('modal-save-btn');
    if (saveBtn) {
      saveBtn.onclick = () => {
        console.log('Modification article:', collection, slug);
        alert('Article modifié ! (Backend à implémenter)');
        closeModal();
      };
    }
  }

  function viewArticle(url) {
    window.open(url, '_blank');
  }

  function deleteArticle(collection, slug) {
    if (confirm(`Êtes-vous sûr de vouloir supprimer l'article "${slug}" ?`)) {
      console.log('Suppression article:', collection, slug);
      alert('Article supprimé ! (Backend à implémenter)');
    }
  }
</script>

</BaseLayout>
