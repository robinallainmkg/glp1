const vscode = require('vscode');

function activate(context) {
    console.log('üöÄ Extension RAGLP v3.6.0 - RAG Super Adaptatif Activ√©e');

    // ========================================
    // SYST√àME D'ANALYSE INTELLIGENT
    // ========================================

    function analyzeUserRequest(description) {
        console.log(`üîç Analyse de la requ√™te: "${description}"`);
        
        const query = description.toLowerCase();
        
        // Patterns de d√©tection tr√®s sp√©cifiques
        const typePatterns = {
            dashboard: /dashboard|admin|gestion|interface|tableau|stats|donn√©es|utilisateur|crud/i,
            api: /api|endpoint|route|backend|serveur|php|typescript|donn√©es|json/i,
            page: /page|article|contenu|seo|astro|blog|landing|site/i,
            component: /composant|component|r√©utilisable|module|ui|widget/i,
            form: /formulaire|form|contact|inscription|newsletter|input|validation/i,
            database: /base|donn√©es|json|storage|fichier|data|crud|bdd/i,
            auth: /auth|authentification|login|session|s√©curit√©|permission/i,
            affiliate: /affiliation|produit|conversion|tracking|commission|vente/i,
            seo: /seo|r√©f√©rencement|google|search|ranking|meta|optimisation/i,
            medical: /m√©dical|glp1|ozempic|wegovy|diab√®te|perte|poids|traitement|sant√©/i,
            performance: /performance|optimisation|vitesse|cache|bundle|lighthouse/i,
            design: /design|style|css|couleur|responsive|mobile|ui|ux/i
        };

        let detectedType = 'general';
        let matchedPattern = '';
        
        for (const [type, pattern] of Object.entries(typePatterns)) {
            if (pattern.test(query)) {
                detectedType = type;
                matchedPattern = pattern.toString();
                console.log(`‚úÖ Type d√©tect√©: ${type.toUpperCase()} (pattern: ${matchedPattern})`);
                break;
            }
        }

        // D√©tection de complexit√©
        const complexityIndicators = {
            simple: /simple|basique|rapide|petit|l√©ger|minimal|basic/i,
            medium: /moyen|standard|normal|complet|classique/i,
            complex: /complexe|avanc√©|sophistiqu√©|complet|int√©gration|syst√®me|enterprise/i
        };

        let complexity = 'medium';
        for (const [level, pattern] of Object.entries(complexityIndicators)) {
            if (pattern.test(query)) {
                complexity = level;
                console.log(`üìä Complexit√©: ${level.toUpperCase()}`);
                break;
            }
        }

        // D√©tection d'urgence
        const urgencyPatterns = {
            urgent: /urgent|rapide|vite|asap|imm√©diat|emergency/i,
            normal: /normal|standard|quand|possible/i,
            low: /futur|plus tard|√©ventuel|optionnel/i
        };

        let urgency = 'normal';
        for (const [level, pattern] of Object.entries(urgencyPatterns)) {
            if (pattern.test(query)) {
                urgency = level;
                console.log(`‚è±Ô∏è Urgence: ${level.toUpperCase()}`);
                break;
            }
        }

        // Extraction de mots-cl√©s
        const keywords = extractKeywords(query);
        console.log(`üîë Mots-cl√©s: ${keywords.join(', ')}`);

        const result = {
            type: detectedType,
            complexity,
            urgency,
            keywords,
            originalQuery: description
        };

        console.log(`üéØ Analyse finale:`, result);
        return result;
    }

    function extractKeywords(query) {
        const stopWords = ['le', 'la', 'les', 'un', 'une', 'des', 'du', 'de', 'et', 'ou', 'pour', 'avec', 'dans', 'sur', '√†', 'il', 'elle', 'est', 'sont', 'avoir', '√™tre', 'que', 'qui', 'cette', 'ces'];
        return query.split(/[\\s,.-]+/)
            .filter(word => word.length > 2 && !stopWords.includes(word.toLowerCase()))
            .slice(0, 5);
    }

    // ========================================
    // G√âN√âRATEUR DE PROMPT ADAPTATIF
    // ========================================

    function generateAdaptivePrompt(analysis) {
        console.log(`üé® G√©n√©ration du prompt adaptatif pour type: ${analysis.type}`);

        const timestamp = new Date().toLocaleString('fr-FR');
        
        let adaptivePrompt = `# ü§ñ RAG Adaptatif GLP1 France v3.6.0
**Timestamp**: ${timestamp}
**Requ√™te originale**: "${analysis.originalQuery}"

## üî¨ ANALYSE AUTOMATIQUE
- **Type d√©tect√©**: ${analysis.type.toUpperCase()} ‚úÖ
- **Complexit√©**: ${analysis.complexity.toUpperCase()} üìä
- **Urgence**: ${analysis.urgency.toUpperCase()} ‚è±Ô∏è
- **Mots-cl√©s**: ${analysis.keywords.join(', ')} üîë

`;

        // Contexte adaptatif selon le type
        const adaptiveContexts = {
            dashboard: `## üñ•Ô∏è CONTEXTE DASHBOARD ADMIN SP√âCIALIS√â
**Mission**: Cr√©er une interface d'administration pour GLP1 France
**Localisation**: \`src/pages/admin-*.astro\`
**R√©f√©rences**: admin-dashboard.astro, admin-users-advanced.astro
**Style**: Design m√©dical bleu (#667eea) violet (#764ba2)

**APIs disponibles pour dashboards**:
- \`/api/user-management.ts\` - CRUD utilisateurs
- \`/api/delete-user-hostinger.php\` - Suppression s√©curis√©e
- \`/api/admin-data.ts\` - Donn√©es administratives
- \`data/users-unified.json\` - Base utilisateurs

**Fonctionnalit√©s dashboard typiques**:
- Tables avec tri/filtrage ‚úÖ
- Statistiques en temps r√©el ‚úÖ
- Actions CRUD s√©curis√©es ‚úÖ
- Export de donn√©es ‚úÖ
- Recherche avanc√©e ‚úÖ`,

            api: `## üîå CONTEXTE API/BACKEND SP√âCIALIS√â
**Mission**: D√©velopper des endpoints robustes pour GLP1 France
**Localisation**: \`src/pages/api/\`
**Format pr√©f√©r√©**: TypeScript (.ts) > PHP (.php)
**Environnement**: Auto-d√©tection local/Hostinger

**Structure de donn√©es GLP1**:
- \`data/users-unified.json\` - Utilisateurs (email, nom, date, etc.)
- \`data/articles-database.json\` - Articles SEO
- \`data/affiliate-products.json\` - Produits d'affiliation
- \`logs/\` - Journaux d'activit√©

**S√©curit√© API obligatoire**:
- Validation stricte des inputs ‚úÖ
- Logs avec IP/timestamp ‚úÖ
- Backup avant modifications ‚úÖ
- Gestion d'erreurs compl√®te ‚úÖ`,

            medical: `## üè• CONTEXTE M√âDICAL GLP-1 SP√âCIALIS√â
**Mission**: Contenu m√©dical sp√©cialis√© traitements GLP-1
**Domaine**: Diab√®te type 2, ob√©sit√©, perte de poids
**Public**: Patients, familles, professionnels de sant√©
**Compliance**: ANSM, RGPD, directives m√©dicales UE

**Traitements GLP-1 couverts**:
- **Ozempic** (semaglutide) - Diab√®te + perte poids
- **Wegovy** (semaglutide haute dose) - Ob√©sit√©
- **Saxenda** (liraglutide) - Perte de poids
- **Trulicity** (dulaglutide) - Diab√®te
- **Mounjaro** (tirzepatide) - Nouvelle g√©n√©ration

**Vocabulaire m√©dical obligatoire**:
- GLP-1: Glucagon-like peptide-1
- HbA1c: H√©moglobine glyqu√©e
- IMC: Indice de masse corporelle
- Effet incr√©tine, r√©sistance insuline`,

            seo: `## üîç CONTEXTE SEO M√âDICAL SP√âCIALIS√â
**Mission**: Optimisation SEO pour requ√™tes m√©dicales GLP-1
**Mots-cl√©s primaires**: GLP-1, Ozempic, Wegovy, diab√®te, perte poids
**Concurrence**: Sites m√©dicaux, forums, pharmacies en ligne
**Autorit√©**: E-A-T (Expertise, Autorit√©, Confiance)

**Structure SEO optimis√©e**:
- H1 unique avec mot-cl√© principal ‚úÖ
- H2-H6 hi√©rarchie logique ‚úÖ
- Meta title 55-60 caract√®res ‚úÖ
- Meta description 150-160 caract√®res ‚úÖ
- Schema.org Medical/Article ‚úÖ
- Liens internes pertinents ‚úÖ`,

            general: `## üîß CONTEXTE G√âN√âRAL GLP1 FRANCE
**Framework**: Astro.js (SSG) + TypeScript
**Design**: M√©dical bleu/violet professionnel
**H√©bergement**: Hostinger (production)
**Performance**: Core Web Vitals optimis√©s`
        };

        adaptivePrompt += adaptiveContexts[analysis.type] || adaptiveContexts.general;

        // Guidelines techniques adaptatives
        adaptivePrompt += `

## üõ†Ô∏è GUIDELINES TECHNIQUES ADAPTATIVES
**Niveau de complexit√©**: ${analysis.complexity.toUpperCase()}`;

        if (analysis.complexity === 'simple') {
            adaptivePrompt += `
- ‚úÖ Solution directe et efficace
- ‚úÖ Code minimal mais fonctionnel  
- ‚úÖ Documentation basique inline
- ‚úÖ MVP (Minimum Viable Product)
- ‚ùå Pas de sur-ing√©nierie`;
        } else if (analysis.complexity === 'complex') {
            adaptivePrompt += `
- ‚úÖ Architecture modulaire et √©volutive
- ‚úÖ Tests unitaires et d'int√©gration
- ‚úÖ Documentation compl√®te (README + comments)
- ‚úÖ Gestion d'erreurs avanc√©e
- ‚úÖ Optimisations performance
- ‚úÖ Monitoring et logging d√©taill√©
- ‚úÖ Scalabilit√© pr√©vue`;
        } else {
            adaptivePrompt += `
- ‚úÖ Code structur√© et maintenable
- ‚úÖ Gestion d'erreurs standard
- ‚úÖ Documentation des fonctions cl√©s
- ‚úÖ Tests de base
- ‚úÖ Bonnes pratiques respect√©es`;
        }

        // Instructions de livraison selon l'urgence
        adaptivePrompt += `

## üì¶ INSTRUCTIONS DE LIVRAISON
**Urgence**: ${analysis.urgency.toUpperCase()}`;

        if (analysis.urgency === 'urgent') {
            adaptivePrompt += `
**D√©lai**: Solution IMM√âDIATE requise ‚ö°
**Focus**: Fonctionnalit√© core uniquement
**Qualit√©**: Code fonctionnel, optimisation plus tard
**Livrable**: MVP pr√™t √† d√©ployer en < 30 min`;
        } else if (analysis.urgency === 'low') {
            adaptivePrompt += `
**D√©lai**: Planification long terme üîÆ
**Focus**: Architecture optimale + best practices
**Qualit√©**: Code exemplaire et maintenable
**Livrable**: Solution de r√©f√©rence avec documentation`;
        } else {
            adaptivePrompt += `
**D√©lai**: Solution compl√®te et test√©e üìä
**Focus**: Fonctionnalit√© + qualit√© + s√©curit√©
**Qualit√©**: Code production-ready
**Livrable**: Pr√™t pour d√©ploiement Hostinger`;
        }

        adaptivePrompt += `

## üéØ INSTRUCTION FINALE PERSONNALIS√âE
**G√©n√©rez une solution ${analysis.complexity} pour les mots-cl√©s**: ${analysis.keywords.join(', ')}
**Qui s'int√®gre parfaitement dans l'√©cosyst√®me GLP1 France existant**
**Avec un niveau d'urgence ${analysis.urgency}**

---
ü§ñ *RAG Adaptatif v3.6.0 - Prompt personnalis√© g√©n√©r√© automatiquement*
üïê *${timestamp}*`;

        console.log(`‚úÖ Prompt adaptatif g√©n√©r√© (${adaptivePrompt.length} caract√®res)`);
        return adaptivePrompt;
    }

    // ========================================
    // COMMANDES VS CODE
    // ========================================

    // Commande test
    const testCommand = vscode.commands.registerCommand('raglp.testConnection', () => {
        vscode.window.showInformationMessage('üöÄ RAGLP v3.6.0 RAG Super Adaptatif - ACTIF ! ‚úÖ');
    });

    // Commande principale : G√©n√©ration de prompt adaptatif
    const promptCommand = vscode.commands.registerCommand('raglp.generatePrompt', async () => {
        const description = await vscode.window.showInputBox({
            prompt: 'üéØ D√©crivez votre besoin (le RAG va s\'adapter automatiquement)',
            placeholder: 'Ex: dashboard admin urgent, api m√©dical complexe, page seo ozempic...',
            ignoreFocusOut: true
        });

        if (description && description.trim()) {
            console.log(`üöÄ D√©but de g√©n√©ration pour: "${description}"`);
            
            // Analyse intelligente
            const analysis = analyzeUserRequest(description);
            
            // G√©n√©ration adaptative
            const adaptivePrompt = generateAdaptivePrompt(analysis);
            
            // Affichage
            const doc = await vscode.workspace.openTextDocument({
                content: adaptivePrompt,
                language: 'markdown'
            });
            
            await vscode.window.showTextDocument(doc);
            
            // Notification de succ√®s avec d√©tails
            vscode.window.showInformationMessage(
                `‚úÖ Prompt ${analysis.type.toUpperCase()} adaptatif g√©n√©r√© ! Complexit√©: ${analysis.complexity}, Urgence: ${analysis.urgency}`
            );
        }
    });

    // Commande de d√©mo comparative
    const demoCommand = vscode.commands.registerCommand('raglp.demoAdaptive', async () => {
        const testRequests = [
            'dashboard admin pour g√©rer les utilisateurs avec stats',
            'api endpoint complexe pour supprimer des articles m√©dicaux',  
            'page seo simple sur ozempic et wegovy',
            'formulaire contact urgent minimaliste'
        ];

        let demoContent = `# üß™ D√âMONSTRATION RAG ADAPTATIF v3.6.0
Date: ${new Date().toLocaleString('fr-FR')}

## üéØ Preuve que le RAG s'adapte vraiment √† chaque requ√™te

`;

        for (let i = 0; i < testRequests.length; i++) {
            const request = testRequests[i];
            const analysis = analyzeUserRequest(request);
            
            demoContent += `### Test ${i + 1}: "${request}"
- **Type d√©tect√©**: ${analysis.type.toUpperCase()} üéØ
- **Complexit√©**: ${analysis.complexity.toUpperCase()} üìä  
- **Urgence**: ${analysis.urgency.toUpperCase()} ‚è±Ô∏è
- **Mots-cl√©s**: ${analysis.keywords.join(', ')} üîë

`;
        }

        demoContent += `
## ‚úÖ Conclusion
Chaque requ√™te g√©n√®re une analyse diff√©rente !
**Le RAG est bel et bien adaptatif** üöÄ

Pour tester: \`Ctrl+Shift+P > RAGLP: G√©n√©rer Prompt\``;

        const doc = await vscode.workspace.openTextDocument({
            content: demoContent,
            language: 'markdown'
        });
        
        await vscode.window.showTextDocument(doc);
    });

    // Enregistrement des commandes
    context.subscriptions.push(testCommand);
    context.subscriptions.push(promptCommand);
    context.subscriptions.push(demoCommand);
}

function deactivate() {}

module.exports = { activate, deactivate };
