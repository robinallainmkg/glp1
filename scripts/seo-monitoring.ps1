# üöÄ SCRIPT AUTOMATION SEO - GLP1 FRANCE
# Automatise l'analyse SEO et g√©n√®re des rapports

Write-Host "üöÄ === AUTOMATION ANALYSE SEO - GLP1 FRANCE ===" -ForegroundColor Green
Write-Host "‚è∞ D√©marrage : $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')" -ForegroundColor Cyan
Write-Host ""

# Configuration
$ProjectPath = "C:\Users\robin\projet\glp1-main"
$AnalysisScript = "scripts/seo-analysis/final-analysis.mjs"
$ReportDir = "seo-analysis"
$DashboardFile = "$ReportDir/dashboard.html"

# V√©rification pr√©requis
Write-Host "üìã V√©rification des pr√©requis..." -ForegroundColor Yellow

if (!(Test-Path $ProjectPath)) {
    Write-Host "‚ùå Projet non trouv√© : $ProjectPath" -ForegroundColor Red
    exit 1
}

Set-Location $ProjectPath

if (!(Test-Path $AnalysisScript)) {
    Write-Host "‚ùå Script d'analyse non trouv√© : $AnalysisScript" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Pr√©requis OK" -ForegroundColor Green
Write-Host ""

# Ex√©cution de l'analyse
Write-Host "üîç Lancement de l'analyse SEO..." -ForegroundColor Yellow
Write-Host "‚îÄ" * 50

try {
    node $AnalysisScript
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Host "‚úÖ Analyse termin√©e avec succ√®s !" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors de l'analyse (code: $LASTEXITCODE)" -ForegroundColor Red
        exit $LASTEXITCODE
    }
} catch {
    Write-Host "‚ùå Erreur lors de l'ex√©cution : $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# V√©rification des fichiers g√©n√©r√©s
Write-Host ""
Write-Host "üìÇ V√©rification des fichiers g√©n√©r√©s..." -ForegroundColor Yellow

$ReportFile = "$ReportDir/seo-analysis-report.json"
$DashboardPath = $DashboardFile

if (Test-Path $ReportFile) {
    $ReportSize = (Get-Item $ReportFile).Length
    Write-Host "‚úÖ Rapport JSON g√©n√©r√© : $ReportFile ($ReportSize bytes)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Rapport JSON manquant : $ReportFile" -ForegroundColor Red
}

if (Test-Path $DashboardPath) {
    $DashboardSize = (Get-Item $DashboardPath).Length
    Write-Host "‚úÖ Dashboard HTML g√©n√©r√© : $DashboardPath ($DashboardSize bytes)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Dashboard HTML manquant : $DashboardPath" -ForegroundColor Red
}

# Lecture du rapport pour afficher les statistiques
if (Test-Path $ReportFile) {
    Write-Host ""
    Write-Host "üìä === STATISTIQUES RAPIDES ===" -ForegroundColor Cyan
    
    try {
        $Report = Get-Content $ReportFile | ConvertFrom-Json
        
        Write-Host "üìÑ Pages analys√©es : $($Report.summary.totalPages)" -ForegroundColor White
        Write-Host "üîç Mots-cl√©s d√©tect√©s : $($Report.summary.totalKeywords)" -ForegroundColor White
        Write-Host "üìà Score moyen : $($Report.summary.averageScore)/100" -ForegroundColor White
        
        $ExcellentPages = ($Report.pages | Where-Object { $_.overallScore -ge 80 }).Count
        $PoorPages = ($Report.pages | Where-Object { $_.overallScore -lt 50 }).Count
        
        Write-Host "‚úÖ Pages excellentes (‚â•80) : $ExcellentPages" -ForegroundColor Green
        Write-Host "‚ö†Ô∏è Pages √† am√©liorer (<50) : $PoorPages" -ForegroundColor Yellow
        
        # Top 3 mots-cl√©s
        if ($Report.keywords) {
            Write-Host ""
            Write-Host "üèÜ TOP 3 MOTS-CL√âS :" -ForegroundColor Cyan
            
            $TopKeywords = $Report.keywords.PSObject.Properties | 
                Sort-Object { $_.Value.averageScore } -Descending | 
                Select-Object -First 3
            
            $i = 1
            foreach ($kw in $TopKeywords) {
                $name = $kw.Name
                $score = $kw.Value.averageScore
                $pages = $kw.Value.pages.Count
                Write-Host "   $i. $name : $score/100 ($pages pages)" -ForegroundColor White
                $i++
            }
        }
        
        # Top probl√®mes
        if ($Report.summary.topIssues -and $Report.summary.topIssues.Count -gt 0) {
            Write-Host ""
            Write-Host "üö® TOP PROBL√àMES :" -ForegroundColor Red
            
            foreach ($issue in $Report.summary.topIssues | Select-Object -First 3) {
                Write-Host "   ‚Ä¢ $($issue.issue) : $($issue.count) pages" -ForegroundColor Yellow
            }
        }
        
    } catch {
        Write-Host "‚ö†Ô∏è Erreur lecture rapport : $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Options post-analyse
Write-Host ""
Write-Host "üéØ === OPTIONS POST-ANALYSE ===" -ForegroundColor Cyan

Write-Host "1. Ouvrir le dashboard dans le navigateur" -ForegroundColor White
Write-Host "2. Copier les rapports vers le dossier de d√©ploiement" -ForegroundColor White
Write-Host "3. Programmer une analyse automatique" -ForegroundColor White
Write-Host "4. Quitter" -ForegroundColor White

do {
    $choice = Read-Host "`nChoisissez une option (1-4)"
    
    switch ($choice) {
        "1" {
            Write-Host "üåê Ouverture du dashboard..." -ForegroundColor Green
            if (Test-Path $DashboardPath) {
                Start-Process $DashboardPath
            } else {
                Write-Host "‚ùå Dashboard non trouv√©" -ForegroundColor Red
            }
        }
        
        "2" {
            $DeployPath = "..\glp1-deploy"
            if (Test-Path $DeployPath) {
                Write-Host "üìÅ Copie vers $DeployPath..." -ForegroundColor Green
                
                if (!(Test-Path "$DeployPath\seo-reports")) {
                    New-Item -Path "$DeployPath\seo-reports" -ItemType Directory | Out-Null
                }
                
                Copy-Item $ReportDir\* "$DeployPath\seo-reports\" -Recurse -Force
                Write-Host "‚úÖ Rapports copi√©s vers le dossier de d√©ploiement" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Dossier de d√©ploiement non trouv√© : $DeployPath" -ForegroundColor Red
            }
        }
        
        "3" {
            Write-Host "‚è∞ Configuration analyse automatique..." -ForegroundColor Green
            Write-Host "üìù Cr√©er une t√¢che planifi√©e Windows pour ex√©cuter ce script quotidiennement ?" -ForegroundColor Yellow
            $automate = Read-Host "Cr√©er la t√¢che ? (o/n)"
            
            if ($automate -eq "o" -or $automate -eq "O") {
                $TaskName = "SEO-Analysis-GLP1"
                $ScriptPath = (Get-Location).Path + "\scripts\seo-monitoring.ps1"
                
                Write-Host "üîß Cr√©ation de la t√¢che planifi√©e..." -ForegroundColor Green
                
                # Cr√©er la t√¢che Windows (simplifi√©e)
                $action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-File `"$ScriptPath`""
                $trigger = New-ScheduledTaskTrigger -Daily -At "06:00"
                $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
                
                try {
                    Register-ScheduledTask -TaskName $TaskName -Action $action -Trigger $trigger -Settings $settings -Description "Analyse SEO quotidienne GLP1-France" -Force
                    Write-Host "‚úÖ T√¢che planifi√©e cr√©√©e : $TaskName (ex√©cution quotidienne √† 6h)" -ForegroundColor Green
                } catch {
                    Write-Host "‚ùå Erreur cr√©ation t√¢che : $($_.Exception.Message)" -ForegroundColor Red
                }
            }
        }
        
        "4" {
            break
        }
        
        default {
            Write-Host "‚ùå Option invalide. Choisissez 1-4." -ForegroundColor Red
        }
    }
} while ($choice -ne "4")

Write-Host ""
Write-Host "üéâ === ANALYSE SEO TERMIN√âE ===" -ForegroundColor Green
Write-Host "üìÇ Rapports disponibles dans : $ReportDir\" -ForegroundColor Cyan
Write-Host "üìä Dashboard : $DashboardPath" -ForegroundColor Cyan
Write-Host "‚è∞ Termin√© √† : $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')" -ForegroundColor Cyan
Write-Host ""
Write-Host "üöÄ Merci d'utiliser l'outil d'analyse SEO GLP1-France !" -ForegroundColor Green
