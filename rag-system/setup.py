#!/usr/bin/env python3
"""
ü§ñ Configuration automatique du syst√®me RAG GLP1-France
Lancez ce script pour configurer automatiquement votre syst√®me RAG.
"""

import os
import sys
import json
import subprocess
from pathlib import Path

class RAGConfigurator:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.config = {}
        
    def print_banner(self):
        print("""
ü§ñ ===============================================
   Configuration automatique RAG GLP1-France
===============================================
        """)
        
    def check_dependencies(self):
        """V√©rifier et installer les d√©pendances Python"""
        print("üì¶ V√©rification des d√©pendances...")
        
        required_packages = ['openai', 'beautifulsoup4', 'requests']
        missing_packages = []
        
        for package in required_packages:
            try:
                __import__(package.replace('-', '_'))
                print(f"  ‚úÖ {package}")
            except ImportError:
                missing_packages.append(package)
                print(f"  ‚ùå {package}")
        
        if missing_packages:
            print(f"\nüì• Installation des packages manquants: {', '.join(missing_packages)}")
            try:
                subprocess.check_call([
                    sys.executable, '-m', 'pip', 'install'
                ] + missing_packages)
                print("  ‚úÖ Installation r√©ussie")
            except subprocess.CalledProcessError:
                print("  ‚ùå Erreur d'installation")
                print("  üí° Essayez manuellement: pip install " + " ".join(missing_packages))
                return False
        
        return True
    
    def setup_openai_key(self):
        """Configuration de la cl√© OpenAI"""
        print("\nüîë Configuration OpenAI...")
        
        # V√©rifier si la cl√© existe d√©j√†
        env_file = self.base_dir / '.env'
        api_key = None
        
        if env_file.exists():
            with open(env_file, 'r') as f:
                for line in f:
                    if line.startswith('OPENAI_API_KEY='):
                        api_key = line.split('=', 1)[1].strip()
                        break
        
        if not api_key:
            print("  üìù Veuillez saisir votre cl√© API OpenAI:")
            print("  üí° Obtenez-la sur: https://platform.openai.com/api-keys")
            api_key = input("  üîë Cl√© API (sk-...): ").strip()
            
            if not api_key.startswith('sk-'):
                print("  ‚ùå Format de cl√© invalide")
                return False
            
            # Sauvegarder dans .env
            with open(env_file, 'w') as f:
                f.write(f"OPENAI_API_KEY={api_key}\n")
                f.write("OPENAI_MODEL_EMBEDDING=text-embedding-3-small\n")
                f.write("OPENAI_MODEL_COMPLETION=gpt-4o-mini\n")
                f.write("MAX_CHUNKS_PER_RESPONSE=5\n")
                f.write("SIMILARITY_THRESHOLD=0.7\n")
            
        # Mettre √† jour search.php avec la cl√©
        search_php = self.base_dir / 'api' / 'search.php'
        if search_php.exists():
            content = search_php.read_text(encoding='utf-8')
            if 'your-openai-api-key-here' in content:
                content = content.replace('your-openai-api-key-here', api_key)
                search_php.write_text(content, encoding='utf-8')
                print("  ‚úÖ Cl√© API configur√©e dans search.php")
        
        self.config['api_key'] = api_key
        print("  ‚úÖ Cl√© OpenAI configur√©e")
        return True
    
    def create_directories(self):
        """Cr√©er les r√©pertoires n√©cessaires"""
        print("\nüìÅ Cr√©ation des r√©pertoires...")
        
        directories = [
            'embeddings',
            'docs/content',
            'logs'
        ]
        
        for directory in directories:
            dir_path = self.base_dir / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"  ‚úÖ {directory}")
        
        return True
    
    def test_openai_connection(self):
        """Tester la connexion OpenAI"""
        print("\nüîó Test de la connexion OpenAI...")
        
        try:
            import openai
            openai.api_key = self.config['api_key']
            
            # Test simple avec l'API embeddings
            response = openai.Embedding.create(
                model="text-embedding-3-small",
                input="test de connexion"
            )
            
            print("  ‚úÖ Connexion OpenAI r√©ussie")
            return True
            
        except Exception as e:
            print(f"  ‚ùå Erreur de connexion: {e}")
            print("  üí° V√©rifiez votre cl√© API et votre connexion internet")
            return False
    
    def run_indexing(self):
        """Lancer l'indexation du contenu"""
        print("\nüîç Indexation du contenu...")
        
        indexer_script = self.base_dir / 'indexer.py'
        if not indexer_script.exists():
            print("  ‚ùå Script indexer.py non trouv√©")
            return False
        
        print("  üìä Lancement de l'indexation (cela peut prendre plusieurs minutes)...")
        
        try:
            # D√©finir les variables d'environnement
            env = os.environ.copy()
            env['OPENAI_API_KEY'] = self.config['api_key']
            
            result = subprocess.run([
                sys.executable, str(indexer_script)
            ], env=env, capture_output=True, text=True, cwd=self.base_dir)
            
            if result.returncode == 0:
                print("  ‚úÖ Indexation termin√©e")
                
                # V√©rifier que les embeddings ont √©t√© cr√©√©s
                embeddings_file = self.base_dir / 'embeddings' / 'glp1_embeddings.json'
                if embeddings_file.exists():
                    with open(embeddings_file, 'r') as f:
                        data = json.load(f)
                        count = len(data.get('chunks', []))
                        print(f"  üìä {count} chunks index√©s")
                else:
                    print("  ‚ö†Ô∏è  Fichier d'embeddings non cr√©√©")
                    
                return True
            else:
                print(f"  ‚ùå Erreur d'indexation: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"  ‚ùå Erreur: {e}")
            return False
    
    def setup_web_server(self):
        """Configuration du serveur web"""
        print("\nüåê Configuration du serveur web...")
        
        # Cr√©er un fichier .htaccess pour Apache
        htaccess = self.base_dir / '.htaccess'
        htaccess_content = """# Configuration RAG GLP1-France
RewriteEngine On

# CORS pour l'API
<FilesMatch "\\.(php)$">
    Header always set Access-Control-Allow-Origin "*"
    Header always set Access-Control-Allow-Methods "GET, POST, OPTIONS"
    Header always set Access-Control-Allow-Headers "Content-Type, Authorization"
</FilesMatch>

# Gestion des requ√™tes OPTIONS
RewriteCond %{REQUEST_METHOD} OPTIONS
RewriteRule ^(.*)$ $1 [R=200,L]

# Protection des fichiers sensibles
<Files ".env">
    Order allow,deny
    Deny from all
</Files>

<Files "*.log">
    Order allow,deny
    Deny from all
</Files>
"""
        
        with open(htaccess, 'w') as f:
            f.write(htaccess_content)
        
        print("  ‚úÖ Fichier .htaccess cr√©√©")
        
        # Instructions pour le d√©ploiement
        print("\nüìã Instructions de d√©ploiement:")
        print("  1. Copiez le dossier 'rag-system' sur votre serveur web")
        print("  2. Assurez-vous que PHP est activ√©")
        print("  3. Testez avec: http://votre-site.com/rag-system/demo.html")
        
        return True
    
    def create_test_page(self):
        """Cr√©er une page de test simple"""
        print("\nüß™ Cr√©ation de la page de test...")
        
        test_page = self.base_dir / 'test-simple.html'
        test_content = """<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test RAG Simple</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .result { background: #f0f0f0; padding: 20px; margin: 20px 0; border-radius: 5px; }
        button { background: #007cba; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
        input { padding: 10px; width: 300px; margin-right: 10px; }
    </style>
</head>
<body>
    <h1>ü§ñ Test RAG GLP1-France</h1>
    
    <div>
        <input type="text" id="query" placeholder="Votre question..." value="Qu'est-ce que GLP1 ?">
        <button onclick="testRAG()">Tester</button>
    </div>
    
    <div id="result"></div>
    
    <script>
        async function testRAG() {
            const query = document.getElementById('query').value;
            const resultDiv = document.getElementById('result');
            
            resultDiv.innerHTML = 'Recherche en cours...';
            
            try {
                const response = await fetch('api/search.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        query: query,
                        generate_answer: true,
                        limit: 3
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    let html = '<h3>‚úÖ Test r√©ussi!</h3>';
                    html += '<p><strong>R√©ponse:</strong> ' + data.answer + '</p>';
                    html += '<p><strong>Sources trouv√©es:</strong> ' + data.results.length + '</p>';
                    resultDiv.innerHTML = html;
                } else {
                    resultDiv.innerHTML = '<h3>‚ùå Erreur:</h3><p>' + data.error + '</p>';
                }
                
            } catch (error) {
                resultDiv.innerHTML = '<h3>‚ùå Erreur de connexion:</h3><p>' + error.message + '</p>';
            }
        }
    </script>
</body>
</html>"""
        
        with open(test_page, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        print("  ‚úÖ Page de test cr√©√©e: test-simple.html")
        return True
    
    def run_final_test(self):
        """Test final du syst√®me"""
        print("\nüéØ Test final du syst√®me...")
        
        # V√©rifier que tous les fichiers n√©cessaires existent
        required_files = [
            'indexer.py',
            'api/search.php',
            'glp1-chat-widget.js',
            'demo.html',
            'embeddings/glp1_embeddings.json'
        ]
        
        all_files_exist = True
        for file_path in required_files:
            full_path = self.base_dir / file_path
            if full_path.exists():
                print(f"  ‚úÖ {file_path}")
            else:
                print(f"  ‚ùå {file_path} manquant")
                all_files_exist = False
        
        if all_files_exist:
            print("\nüéâ Configuration termin√©e avec succ√®s!")
            print("\nüìã Prochaines √©tapes:")
            print("  1. Ouvrez demo.html dans votre navigateur")
            print("  2. Testez le syst√®me avec quelques questions")
            print("  3. Int√©grez le widget sur votre site")
            print("  4. Consultez README.md pour plus d'informations")
            return True
        else:
            print("\n‚ö†Ô∏è  Configuration incompl√®te")
            return False
    
    def run(self):
        """Lancer la configuration compl√®te"""
        self.print_banner()
        
        steps = [
            ("D√©pendances", self.check_dependencies),
            ("Cl√© OpenAI", self.setup_openai_key),
            ("R√©pertoires", self.create_directories),
            ("Test connexion", self.test_openai_connection),
            ("Indexation", self.run_indexing),
            ("Serveur web", self.setup_web_server),
            ("Page de test", self.create_test_page),
            ("Test final", self.run_final_test)
        ]
        
        for step_name, step_func in steps:
            if not step_func():
                print(f"\n‚ùå √âchec √† l'√©tape: {step_name}")
                print("üí° Consultez les logs ci-dessus pour corriger le probl√®me")
                return False
        
        print("\nüéâ Configuration termin√©e!")
        return True

if __name__ == "__main__":
    configurator = RAGConfigurator()
    success = configurator.run()
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)
