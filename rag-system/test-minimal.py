#!/usr/bin/env python3
"""
Test minimal et s√©curis√© du syst√®me RAG
"""

import os
import sys
from pathlib import Path

def test_minimal():
    """Test minimal qui ne peut pas faire planter le syst√®me"""
    print("=== TEST MINIMAL RAG ===")
    
    # V√©rifier les d√©pendances
    print("\n1. Test des d√©pendances...")
    try:
        import openai
        print("  ‚úÖ OpenAI OK")
    except ImportError:
        print("  ‚ùå OpenAI manquant")
        print("  Installez avec: pip install openai")
        return False
    
    try:
        import requests
        print("  ‚úÖ Requests OK")
    except ImportError:
        print("  ‚ùå Requests manquant")
        return False
    
    try:
        import bs4
        print("  ‚úÖ BeautifulSoup OK")
    except ImportError:
        print("  ‚ùå BeautifulSoup manquant")
        return False
    
    # Test de la cl√© API
    print("\n2. Test cl√© API...")
    api_key = "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"
    
    if api_key.startswith('sk-'):
        print("  ‚úÖ Format cl√© API OK")
    else:
        print("  ‚ùå Format cl√© API invalide")
        return False
    
    # Test connexion OpenAI (tr√®s simple)
    print("\n3. Test connexion OpenAI...")
    try:
        from openai import OpenAI
        client = OpenAI(api_key=api_key)
        
        # Test minimal - juste un petit embedding
        response = client.embeddings.create(
            model="text-embedding-3-small",
            input="test simple"
        )
        
        if response and response.data:
            print("  ‚úÖ Connexion OpenAI OK")
            print(f"  Embedding size: {len(response.data[0].embedding)}")
        else:
            print("  ‚ùå R√©ponse vide")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Erreur connexion: {e}")
        return False
    
    # V√©rifier la structure des dossiers
    print("\n4. Test structure dossiers...")
    base_dir = Path(".")
    
    required_dirs = ["embeddings", "api"]
    for dirname in required_dirs:
        dir_path = base_dir / dirname
        if dir_path.exists():
            print(f"  ‚úÖ {dirname}/")
        else:
            print(f"  ‚ùå {dirname}/ manquant")
            dir_path.mkdir(exist_ok=True)
            print(f"  ‚úÖ {dirname}/ cr√©√©")
    
    # V√©rifier les fichiers
    print("\n5. Test fichiers...")
    required_files = [
        "glp1-chat-widget.js",
        "demo.html",
        "api/search.php"
    ]
    
    for filename in required_files:
        file_path = base_dir / filename
        if file_path.exists():
            print(f"  ‚úÖ {filename}")
        else:
            print(f"  ‚ùå {filename} manquant")
    
    print("\n‚úÖ TESTS BASIQUES TERMINES")
    print("\nPour indexer en s√©curit√©:")
    print("  python indexer-safe.py")
    
    return True

if __name__ == "__main__":
    success = test_minimal()
    if success:
        print("\nüéâ Syst√®me pr√™t pour l'indexation s√©curis√©e!")
    else:
        print("\n‚ùå Probl√®mes d√©tect√©s - corrigez avant de continuer")
    
    input("\nAppuyez sur Entr√©e pour continuer...")
